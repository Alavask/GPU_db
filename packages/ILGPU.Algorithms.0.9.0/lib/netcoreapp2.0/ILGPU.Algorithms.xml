<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ILGPU.Algorithms</name>
    </assembly>
    <members>
        <member name="T:ILGPU.AlgorithmContext">
            <summary>
            Represents the main driver class for all algorithms.
            </summary>
        </member>
        <member name="F:ILGPU.AlgorithmContext.IntrinsicBindingFlags">
            <summary>
            The default intrinsic binding flags.
            </summary>
        </member>
        <member name="F:ILGPU.AlgorithmContext.XMathType">
            <summary>
            The global <see cref="T:ILGPU.Algorithms.XMath"/> type.
            </summary>
        </member>
        <member name="F:ILGPU.AlgorithmContext.GroupExtensionsType">
            <summary>
            The global <see cref="T:ILGPU.Algorithms.GroupExtensions"/> type.
            </summary>
        </member>
        <member name="F:ILGPU.AlgorithmContext.WarpExtensionsType">
            <summary>
            The global <see cref="T:ILGPU.Algorithms.WarpExtensions"/> type.
            </summary>
        </member>
        <member name="M:ILGPU.AlgorithmContext.#cctor">
            <summary>
            Initializes a static instance.
            </summary>
        </member>
        <member name="M:ILGPU.AlgorithmContext.EnableAlgorithms(ILGPU.Context)">
            <summary>
            Enables algorithm extensions in the scope of the given context.
            </summary>
            <param name="context">The context to enable algorithms for.</param>
        </member>
        <member name="M:ILGPU.AlgorithmContext.RegisterMathRemappings">
            <summary>
            Registers all math remappings for faster code generation.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.AlgorithmObject">
            <summary>
            Represents the base class for all objects that need to
            reference an accelerator.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="M:ILGPU.Algorithms.AlgorithmObject.#ctor(ILGPU.Runtime.Accelerator)">
            <summary>
            Constructs a new context object.
            </summary>
            <param name="accelerator">The associated accelerator.</param>
        </member>
        <member name="T:ILGPU.Algorithms.ArrayExtensions">
            <summary>
            Represents extension methods for arrays.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ArrayExtensions.GetExtent``1(``0[])">
            <summary>
            Returns the extent of an one-dimensional array.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="array">The source array.</param>
            <returns>The extent of an one-dimensional array.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ArrayExtensions.GetExtent``1(``0[0:,0:])">
            <summary>
            Returns the extent of a two-dimensional array.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="array">The source array.</param>
            <returns>The extent of a two-dimensional array.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ArrayExtensions.GetExtent``1(``0[0:,0:,0:])">
            <summary>
            Returns the extent of a three-dimensional array.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="array">The source array.</param>
            <returns>The extent of a three-dimensional array.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ArrayExtensions.GetValue``1(``0[],ILGPU.Index1)">
            <summary>
            Returns the value at the given index.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="array">The source array.</param>
            <param name="index">The element index.</param>
            <returns>The value at the given index.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ArrayExtensions.GetValue``1(``0[0:,0:],ILGPU.Index2)">
            <summary>
            Returns the value at the given index.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="array">The source array.</param>
            <param name="index">The element index.</param>
            <returns>The value at the given index.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ArrayExtensions.GetValue``1(``0[0:,0:,0:],ILGPU.Index3)">
            <summary>
            Returns the value at the given index.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="array">The source array.</param>
            <param name="index">The element index.</param>
            <returns>The value at the given index.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ArrayExtensions.SetValue``1(``0[],``0,ILGPU.Index1)">
            <summary>
            Sets the value at the given index to the given one.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="array">The target array.</param>
            <param name="value">The value to set.</param>
            <param name="index">The element index.</param>
        </member>
        <member name="M:ILGPU.Algorithms.ArrayExtensions.SetValue``1(``0[0:,0:],``0,ILGPU.Index2)">
            <summary>
            Sets the value at the given index to the given one.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="array">The target array.</param>
            <param name="value">The value to set.</param>
            <param name="index">The element index.</param>
        </member>
        <member name="M:ILGPU.Algorithms.ArrayExtensions.SetValue``1(``0[0:,0:,0:],``0,ILGPU.Index3)">
            <summary>
            Sets the value at the given index to the given one.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="array">The target array.</param>
            <param name="value">The value to set.</param>
            <param name="index">The element index.</param>
        </member>
        <member name="T:ILGPU.Algorithms.CL.CLContext">
            <summary>
            Manages custom CL-specific intrinsics.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.CL.CLContext.CLMathType">
            <summary>
            The <see cref="T:ILGPU.Algorithms.CL.CLMath"/> type.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.CL.CLContext.MathCodeGenerator">
            <summary>
            Represents the <see cref="M:ILGPU.Algorithms.CL.CLMath.GenerateMathIntrinsic(ILGPU.Backends.OpenCL.CLBackend,ILGPU.Backends.OpenCL.CLCodeGenerator,ILGPU.IR.Value)"/>
            methods.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.CL.CLContext.MathCodeGeneratorIntrinsic">
            <summary>
            Represents the intrinsic representation of the
            <see cref="F:ILGPU.Algorithms.CL.CLContext.MathCodeGenerator"/>.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.CL.CLContext.CLGroupExtensionsType">
            <summary>
            The <see cref="T:ILGPU.Algorithms.CL.CLGroupExtensions"/> type.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.CL.CLContext.CLWarpExtensionsType">
            <summary>
            The <see cref="T:ILGPU.Algorithms.CL.CLWarpExtensions"/> type.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLContext.GetMathIntrinsic(System.String,System.Type[])">
            <summary>
            Resolves a CL intrinsic for the given math-function configuration.
            </summary>
            <param name="name">The intrinsic name.</param>
            <param name="types">The parameter types.</param>
            <returns>The resolved intrinsic representation.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLContext.RegisterIntrinsicMapping(ILGPU.IR.Intrinsics.IntrinsicImplementationManager,System.Type,System.Type,System.String)">
            <summary>
            Registers an intrinsic mapping.
            </summary>
            <param name="manager">The current manager.</param>
            <param name="sourceType">The source type.</param>
            <param name="targetType">The target type.</param>
            <param name="name">The method name to register.</param>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLContext.RegisterIntrinsicCodeGenerator(ILGPU.IR.Intrinsics.IntrinsicImplementationManager,System.Type,System.Type,System.String,System.String)">
            <summary>
            Registers an intrinsic mapping using a code generator.
            </summary>
            <param name="manager">The current manager.</param>
            <param name="sourceType">The source type.</param>
            <param name="targetType">The target type.</param>
            <param name="name">The method name to register.</param>
            <param name="codeGeneratorName">
            The name of the code generator to register.
            </param>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLContext.GenerateScanReduce``2(ILGPU.Backends.OpenCL.CLBackend,ILGPU.Backends.OpenCL.CLCodeGenerator,ILGPU.IR.Value,System.String)">
            <summary>
            Generates an intrinsic reduce.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanReduce">The reduction logic.</typeparam>
            <param name="backend">The current backend.</param>
            <param name="codeGenerator">The code generator.</param>
            <param name="value">The value to generate code for.</param>
            <param name="scanReduceOperation">The basic reduction operation.</param>
        </member>
        <member name="T:ILGPU.Algorithms.CL.CLGroupExtensions">
            <summary>
            Custom OpenCL-specific implementations.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLGroupExtensions.GenerateReduce``2(ILGPU.Backends.OpenCL.CLBackend,ILGPU.Backends.OpenCL.CLCodeGenerator,ILGPU.IR.Value)">
            <summary>
            Generates an intrinsic reduce.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TReduction">The type of the reduction logic.</typeparam>
            <param name="backend">The current backend.</param>
            <param name="codeGenerator">The code generator.</param>
            <param name="value">The value to generate code for.</param>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLGroupExtensions.GenerateAllReduce``2(ILGPU.Backends.OpenCL.CLBackend,ILGPU.Backends.OpenCL.CLCodeGenerator,ILGPU.IR.Value)">
            <summary>
            Generates an intrinsic reduce.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TReduction">The type of the reduction logic.</typeparam>
            <param name="backend">The current backend.</param>
            <param name="codeGenerator">The code generator.</param>
            <param name="value">The value to generate code for.</param>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLGroupExtensions.GenerateExclusiveScan``2(ILGPU.Backends.OpenCL.CLBackend,ILGPU.Backends.OpenCL.CLCodeGenerator,ILGPU.IR.Value)">
            <summary>
            Generates an intrinsic scan.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The type of the warp scan logic.</typeparam>
            <param name="backend">The current backend.</param>
            <param name="codeGenerator">The code generator.</param>
            <param name="value">The value to generate code for.</param>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLGroupExtensions.GenerateInclusiveScan``2(ILGPU.Backends.OpenCL.CLBackend,ILGPU.Backends.OpenCL.CLCodeGenerator,ILGPU.IR.Value)">
            <summary>
            Generates an intrinsic scan.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The type of the warp scan logic.</typeparam>
            <param name="backend">The current backend.</param>
            <param name="codeGenerator">The code generator.</param>
            <param name="value">The value to generate code for.</param>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLGroupExtensions.ExclusiveScanWithBoundaries``2(``0,ILGPU.Algorithms.ScanReduceOperations.ScanBoundaries{``0}@)">
            <summary cref="M:ILGPU.Algorithms.GroupExtensions.ExclusiveScanWithBoundaries``2(``0,ILGPU.Algorithms.ScanReduceOperations.ScanBoundaries{``0}@)"/>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLGroupExtensions.InclusiveScanWithBoundaries``2(``0,ILGPU.Algorithms.ScanReduceOperations.ScanBoundaries{``0}@)">
            <summary cref="M:ILGPU.Algorithms.GroupExtensions.InclusiveScanWithBoundaries``2(``0,ILGPU.Algorithms.ScanReduceOperations.ScanBoundaries{``0}@)"/>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.GenerateMathIntrinsic(ILGPU.Backends.OpenCL.CLBackend,ILGPU.Backends.OpenCL.CLCodeGenerator,ILGPU.IR.Value)">
            <summary>
            Generates intrinsic math instructions for the following kinds:
            Rcp
            </summary>
            <param name="backend">The current backend.</param>
            <param name="codeGenerator">The code generator.</param>
            <param name="value">The value to generate code for.</param>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.IsNaN(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.IsNaN(System.Double)"/>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.IsNaN(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.IsNaN(System.Single)"/>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.IsInfinity(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.IsInfinity(System.Double)"/>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.IsInfinity(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.IsInfinity(System.Single)"/>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Rcp(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Rcp(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Rcp(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Rcp(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Rem(System.Double,System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Rem(System.Double,System.Double)"/>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Rem(System.Single,System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Rem(System.Single,System.Single)"/>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Sqrt(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Sqrt(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Sqrt(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Sqrt(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Rsqrt(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Rsqrt(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Rsqrt(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Rsqrt(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Floor(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Floor(System.Double)"/>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Floor(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Floor(System.Single)"/>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Ceiling(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Ceiling(System.Double)"/>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Ceiling(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Ceiling(System.Single)"/>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Sin(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Sin(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Sin(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Sin(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Sinh(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Sinh(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Sinh(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Sinh(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Asin(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Asin(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Asin(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Asin(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Cos(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Cos(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Cos(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Cos(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Cosh(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Cosh(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Cosh(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Cosh(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Acos(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Acos(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Acos(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Acos(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Tan(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Tan(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Tan(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Tan(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Tanh(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Tanh(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Tanh(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Tanh(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Atan(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Atan(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Atan(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Atan(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Atan2(System.Double,System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Atan2(System.Double,System.Double)"/>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Atan2(System.Single,System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Atan2(System.Single,System.Single)"/>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Pow(System.Double,System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Pow(System.Double,System.Double)"/>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Pow(System.Single,System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Pow(System.Single,System.Single)"/>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Exp(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Exp(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Exp(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Exp(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Exp2(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Exp2(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Exp2(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Exp2(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Log(System.Double,System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Log(System.Double,System.Double)"/>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Log(System.Single,System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Log(System.Single,System.Single)"/>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Log(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Log(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Log(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Log(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Log10(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Log10(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Log10(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Log10(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Log2(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Log2(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Log2(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Log2(System.Single)" />
        </member>
        <member name="T:ILGPU.Algorithms.CL.CLWarpExtensions">
            <summary>
            Custom OpenCL-specific implementations.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLWarpExtensions.GenerateReduce``2(ILGPU.Backends.OpenCL.CLBackend,ILGPU.Backends.OpenCL.CLCodeGenerator,ILGPU.IR.Value)">
            <summary>
            Generates an intrinsic reduce.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TReduction">The type of the reduction logic.</typeparam>
            <param name="backend">The current backend.</param>
            <param name="codeGenerator">The code generator.</param>
            <param name="value">The value to generate code for.</param>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLWarpExtensions.GenerateAllReduce``2(ILGPU.Backends.OpenCL.CLBackend,ILGPU.Backends.OpenCL.CLCodeGenerator,ILGPU.IR.Value)">
            <summary>
            Generates an intrinsic reduce.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TReduction">The type of the reduction logic.</typeparam>
            <param name="backend">The current backend.</param>
            <param name="codeGenerator">The code generator.</param>
            <param name="value">The value to generate code for.</param>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLWarpExtensions.GenerateExclusiveScan``2(ILGPU.Backends.OpenCL.CLBackend,ILGPU.Backends.OpenCL.CLCodeGenerator,ILGPU.IR.Value)">
            <summary>
            Generates an intrinsic scan.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The type of the warp scan logic.</typeparam>
            <param name="backend">The current backend.</param>
            <param name="codeGenerator">The code generator.</param>
            <param name="value">The value to generate code for.</param>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLWarpExtensions.GenerateInclusiveScan``2(ILGPU.Backends.OpenCL.CLBackend,ILGPU.Backends.OpenCL.CLCodeGenerator,ILGPU.IR.Value)">
            <summary>
            Generates an intrinsic scan.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The type of the warp scan logic.</typeparam>
            <param name="backend">The current backend.</param>
            <param name="codeGenerator">The code generator.</param>
            <param name="value">The value to generate code for.</param>
        </member>
        <member name="T:ILGPU.Algorithms.IGridStrideLoopBody">
            <summary>
            Represents a grid-stride-loop body.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.IGridStrideLoopBody.Execute(ILGPU.Index1)">
            <summary>
            Executes this loop body using the given index.
            </summary>
            <param name="linearIndex">The current global element index.</param>
        </member>
        <member name="T:ILGPU.Algorithms.IGridStrideLoopBody`1">
            <summary>
            Represents a functional grid-stride-loop body.
            </summary>
            <typeparam name="T">
            The type of the intermediate values inside the loop.
            </typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.IGridStrideLoopBody`1.Execute(ILGPU.Index1,`0)">
            <summary>
            Executes this loop body using the given index.
            </summary>
            <param name="linearIndex">The current global element index.</param>
            <param name="input">The intermediate input value.</param>
            <returns>The resulting intermediate value for the next iteration.</returns>
        </member>
        <member name="T:ILGPU.Algorithms.GridExtensions">
            <summary>
            Contains extensions for thread grids
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.GridExtensions.GridStrideLoopStride">
            <summary>
            Returns the loop stride for a grid-stride loop.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.GridExtensions.GridStrideLoop``1(ILGPU.Index1,``0@)">
            <summary>
            Performs a grid-stride loop.
            </summary>
            <typeparam name="TLoopBody">The type of the loop body.</typeparam>
            <param name="length">The global length.</param>
            <param name="loopBody">The loop body.</param>
        </member>
        <member name="M:ILGPU.Algorithms.GridExtensions.GridStrideLoop``2(ILGPU.Index1,``0,``1)">
            <summary>
            Performs a functional grid-stride loop.
            </summary>
            <typeparam name="T">The element type of the intermediate values.</typeparam>
            <typeparam name="TLoopBody">The type of the loop body.</typeparam>
            <param name="length">The global length.</param>
            <param name="input">The initial input value.</param>
            <param name="loopBody">The loop body.</param>
            <returns>The last intermediate value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.GridExtensions.ComputeGridStrideLoopExtent(ILGPU.Runtime.Accelerator,ILGPU.Index1)">
            <summary>
            Returns a kernel extent (a grouped index) with the maximum number of groups
            using the maximum number of threads per group to launch common grid-stride
            loop kernels.
            </summary>
            <param name="accelerator">The accelerator.</param>
            <param name="numDataElements">
            The number of parallel data elements to process.
            </param>
        </member>
        <member name="M:ILGPU.Algorithms.GridExtensions.ComputeGridStrideLoopExtent(ILGPU.Runtime.Accelerator,ILGPU.Index1,System.Int32@)">
            <summary>
            Returns a kernel extent (a grouped index) with the maximum number of groups
            using the maximum number of threads per group to launch common grid-stride
            loop kernels.
            </summary>
            <param name="accelerator">The accelerator.</param>
            <param name="numDataElements">
            The number of parallel data elements to process.
            </param>
            <param name="numIterationsPerGroup">
            The number of loop iterations per group.
            </param>
        </member>
        <member name="T:ILGPU.Algorithms.GroupExtensions">
            <summary>
            Contains extension methods for thread groups.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.GroupExtensions.Reduce``2(``0)">
            <summary>
            Implements a block-wide reduction algorithm.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TReduction">The type of the reduction logic.</typeparam>
            <param name="value">The current value.</param>
            <returns>All lanes in the first warp contain the reduced value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.GroupExtensions.AllReduce``2(``0)">
            <summary>
            Implements a block-wide reduction algorithm.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TReduction">The type of the reduction logic.</typeparam>
            <param name="value">The current value.</param>
            <returns>All threads in the whole group contain the reduced value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.GroupExtensions.ExclusiveScan``2(``0)">
            <summary>
            Performs a group-wide exclusive scan.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The type of the warp scan logic.</typeparam>
            <param name="value">The value to scan.</param>
            <returns>The resulting value for the current lane.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.GroupExtensions.InclusiveScan``2(``0)">
            <summary>
            Performs a group-wide inclusive scan.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The type of the warp scan logic.</typeparam>
            <param name="value">The value to scan.</param>
            <returns>The resulting value for the current lane.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.GroupExtensions.ExclusiveScanWithBoundaries``2(``0,ILGPU.Algorithms.ScanReduceOperations.ScanBoundaries{``0}@)">
            <summary>
            Performs a group-wide exclusive scan.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The type of the warp scan logic.</typeparam>
            <param name="value">The value to scan.</param>
            <param name="boundaries">The scan boundaries.</param>
            <returns>The resulting value for the current lane.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.GroupExtensions.InclusiveScanWithBoundaries``2(``0,ILGPU.Algorithms.ScanReduceOperations.ScanBoundaries{``0}@)">
            <summary>
            Performs a group-wide inclusive scan.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The type of the warp scan logic.</typeparam>
            <param name="value">The value to scan.</param>
            <param name="boundaries">The scan boundaries.</param>
            <returns>The resulting value for the current lane.</returns>
        </member>
        <member name="T:ILGPU.Algorithms.GroupExtensions.IGroupScan`2">
            <summary>
            Represents an abstract wrapper for scan operations.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The type of the warp scan logic.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.GroupExtensions.IGroupScan`2.Scan(`0)">
            <summary>
            Performs a group-wide scan.
            </summary>
            <param name="value">The value to scan.</param>
            <returns>The resulting value for the current lane.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.GroupExtensions.IGroupScan`2.Scan(`0,ILGPU.Algorithms.ScanReduceOperations.ScanBoundaries{`0}@)">
            <summary>
            Performs a group-wide scan.
            </summary>
            <param name="value">The value to scan.</param>
            <param name="boundaries">The scan boundaries.</param>
            <returns>The resulting value for the current lane.</returns>
        </member>
        <member name="T:ILGPU.Algorithms.GroupExtensions.InclusiveGroupScan`2">
            <summary>
            Represents a wrapper for an inclusive-scan operation.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The type of the warp scan logic.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.GroupExtensions.InclusiveGroupScan`2.Scan(`0)">
            <summary>
            Performs a group-wide inclusive scan.
            </summary>
            <param name="value">The value to scan.</param>
            <returns>The resulting value for the current lane.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.GroupExtensions.InclusiveGroupScan`2.Scan(`0,ILGPU.Algorithms.ScanReduceOperations.ScanBoundaries{`0}@)">
            <summary>
            Performs a group-wide inclusive scan.
            </summary>
            <param name="value">The value to scan.</param>
            <param name="boundaries">The scan boundaries.</param>
            <returns>The resulting value for the current lane.</returns>
        </member>
        <member name="T:ILGPU.Algorithms.GroupExtensions.ExclusiveGroupScan`2">
            <summary>
            Represents a wrapper for an exclusive-scan operation.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The type of the warp scan logic.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.GroupExtensions.ExclusiveGroupScan`2.Scan(`0)">
            <summary>
            Performs a group-wide inclusive scan.
            </summary>
            <param name="value">The value to scan.</param>
            <returns>The resulting value for the current lane.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.GroupExtensions.ExclusiveGroupScan`2.Scan(`0,ILGPU.Algorithms.ScanReduceOperations.ScanBoundaries{`0}@)">
            <summary>
            Performs a group-wide inclusive scan.
            </summary>
            <param name="value">The value to scan.</param>
            <param name="boundaries">The scan boundaries.</param>
            <returns>The resulting value for the current lane.</returns>
        </member>
        <member name="T:ILGPU.Algorithms.Histogram`3">
            <summary>
            Represents a histogram operation on the given view.
            </summary>
            <typeparam name="T">The input view element type.</typeparam>
            <typeparam name="TIndex">The input view index type.</typeparam>
            <typeparam name="TBinType">The histogram bin type.</typeparam>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The input view.</param>
            <param name="histogram">The histogram view to update.</param>
            <param name="histogramOverflow">
            Single-element view that indicates whether the histogram has overflowed.
            </param>
        </member>
        <member name="T:ILGPU.Algorithms.HistogramUnchecked`3">
            <summary>
            Represents a histogram operation on the given view.
            </summary>
            <typeparam name="T">The input view element type.</typeparam>
            <typeparam name="TIndex">The input view index type.</typeparam>
            <typeparam name="TBinType">The histogram bin type.</typeparam>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The input view.</param>
            <param name="histogram">The histogram view to update.</param>
        </member>
        <member name="T:ILGPU.Algorithms.HistogramExtensions">
            <summary>
            Contains extension methods for histogram operations.
            </summary>
            <summary>
            Contains extension methods for histogram operations.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.HistogramExtensions.HistogramDelegate`4">
            <summary>
            The delegate for the computing the histogram.
            </summary>
            <typeparam name="T">The input view element type.</typeparam>
            <typeparam name="TBinType">The histogram bin type.</typeparam>
            <typeparam name="TIncrementor">
            The operation to increment the value of the bin.
            </typeparam>
            <typeparam name="TLocator">
            The operation to compute the bin location.
            </typeparam>
            <param name="stream">The accelerator stream.</param>
            <param name="config">The kernel configuration to use.</param>
            <param name="view">The input view.</param>
            <param name="histogram">The histogram view to update.</param>
            <param name="histogramOverflow">
            Single-element view that indicates whether the histogram has overflowed.
            </param>
            <param name="paddedLength">The padded length of the input view.</param>
        </member>
        <member name="T:ILGPU.Algorithms.HistogramExtensions.HistogramUncheckedDelegate`4">
            <summary>
            The delegate for the computing the histogram.
            </summary>
            <typeparam name="T">The input view element type.</typeparam>
            <typeparam name="TBinType">The histogram bin type.</typeparam>
            <typeparam name="TIncrementor">
            The operation to increment the value of the bin.
            </typeparam>
            <typeparam name="TLocator">
            The operation to compute the bin location.
            </typeparam>
            <param name="stream">The accelerator stream.</param>
            <param name="config">The kernel configuration to use.</param>
            <param name="view">The input view.</param>
            <param name="histogram">The histogram view to update.</param>
            <param name="paddedLength">The padded length of the input view.</param>
        </member>
        <member name="M:ILGPU.Algorithms.HistogramExtensions.HistogramKernel``4(ILGPU.ArrayView{``0},ILGPU.ArrayView{``1},ILGPU.ArrayView{System.Int32},System.Int32)">
            <summary>
            The actual histogram kernel implementation.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TBinType">The histogram bin type.</typeparam>
            <typeparam name="TIncrementor">
            The operation to increment the value of the bin.
            </typeparam>
            <typeparam name="TLocator">
            The operation to compute the bin location.
            </typeparam>
            <param name="view">The input view.</param>
            <param name="histogram">The histogram view to update.</param>
            <param name="histogramOverflow">
            Single-element view that indicates 4 the histogram has overflowed.
            </param>
            <param name="paddedLength">The padded length of the input view.</param>
        </member>
        <member name="M:ILGPU.Algorithms.HistogramExtensions.HistogramUncheckedKernel``4(ILGPU.ArrayView{``0},ILGPU.ArrayView{``1},System.Int32)">
            <summary>
            The actual histogram kernel implementation (without overflow checking).
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TBinType">The histogram bin type.</typeparam>
            <typeparam name="TIncrementor">
            The operation to increment the value of the bin.
            </typeparam>
            <typeparam name="TLocator">
            The operation to compute the bin location.
            </typeparam>
            <param name="view">The input view.</param>
            <param name="histogram">The histogram view to update.</param>
            <param name="paddedLength">The padded length of the input view.</param>
        </member>
        <member name="M:ILGPU.Algorithms.HistogramExtensions.CreateHistogram``5(ILGPU.Runtime.Accelerator)">
            <summary>
            Creates a kernel to calculate the histogram on a supplied view.
            </summary>
            <typeparam name="T">The input view element type.</typeparam>
            <typeparam name="TIndex">The input view index type.</typeparam>
            <typeparam name="TBinType">The histogram bin type.</typeparam>
            <typeparam name="TIncrementor">
            The operation to increment the value of the bin.
            </typeparam>
            <typeparam name="TLocator">
            The operation to compute the bin location.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <returns>The created histogram handler.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.HistogramExtensions.CreateHistogramUnchecked``5(ILGPU.Runtime.Accelerator)">
            <summary>
            Creates a kernel to calculate the histogram on a supplied view
            (without overflow checking).
            </summary>
            <typeparam name="T">The input view element type.</typeparam>
            <typeparam name="TIndex">The input view index type.</typeparam>
            <typeparam name="TBinType">The histogram bin type.</typeparam>
            <typeparam name="TIncrementor">
            The operation to increment the value of the bin.
            </typeparam>
            <typeparam name="TLocator">
            The operation to compute the bin location.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <returns>The created histogram handler.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.HistogramExtensions.Histogram``5(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{``0,``1},ILGPU.ArrayView{``2},ILGPU.ArrayView{System.Int32})">
            <summary>
            Calculates the histogram on the given view.
            </summary>
            <typeparam name="T">The input view element type.</typeparam>
            <typeparam name="TIndex">The input view index type.</typeparam>
            <typeparam name="TBinType">The histogram bin type.</typeparam>
            <typeparam name="TIncrementor">
            The operation to increment the value of the bin.
            </typeparam>
            <typeparam name="TLocator">
            The operation to compute the bin location.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The input view.</param>
            <param name="histogram">The histogram view to update.</param>
            <param name="histogramOverflow">
            Single-element view that indicates whether the histogram has overflowed.
            </param>
        </member>
        <member name="M:ILGPU.Algorithms.HistogramExtensions.HistogramUnchecked``5(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{``0,``1},ILGPU.ArrayView{``2})">
            <summary>
            Calculates the histogram on the given view (without overflow checking).
            </summary>
            <typeparam name="T">The input view element type.</typeparam>
            <typeparam name="TIndex">The input view index type.</typeparam>
            <typeparam name="TBinType">The histogram bin type.</typeparam>
            <typeparam name="TIncrementor">
            The operation to increment the value of the bin.
            </typeparam>
            <typeparam name="TLocator">
            The operation to compute the bin location.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The input view.</param>
            <param name="histogram">The histogram view to update.</param>
        </member>
        <member name="M:ILGPU.Algorithms.HistogramExtensions.Histogram``2(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{``0},ILGPU.ArrayView{System.Int32},ILGPU.ArrayView{System.Int32})">
            <summary>
            Calculates the histogram (int) on the given 1D view.
            </summary>
            <typeparam name="T">The input view element type.</typeparam>
            <typeparam name="TLocator">
            The operation to compute the bin location.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The input view.</param>
            <param name="histogram">The histogram view to update.</param>
            <param name="histogramOverflow">
            Single-element view that indicates whether the histogram has overflowed.
            </param>
        </member>
        <member name="M:ILGPU.Algorithms.HistogramExtensions.Histogram2D``2(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView2D{``0},ILGPU.ArrayView{System.Int32},ILGPU.ArrayView{System.Int32})">
            <summary>
            Calculates the histogram (int) on the given 2D view.
            </summary>
            <typeparam name="T">The input view element type.</typeparam>
            <typeparam name="TLocator">
            The operation to compute the bin location.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The input view.</param>
            <param name="histogram">The histogram view to update.</param>
            <param name="histogramOverflow">
            Single-element view that indicates whether the histogram has overflowed.
            </param>
        </member>
        <member name="M:ILGPU.Algorithms.HistogramExtensions.Histogram3D``2(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView3D{``0},ILGPU.ArrayView{System.Int32},ILGPU.ArrayView{System.Int32})">
            <summary>
            Calculates the histogram (int) on the given 3D view.
            </summary>
            <typeparam name="T">The input view element type.</typeparam>
            <typeparam name="TLocator">
            The operation to compute the bin location.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The input view.</param>
            <param name="histogram">The histogram view to update.</param>
            <param name="histogramOverflow">
            Single-element view that indicates whether the histogram has overflowed.
            </param>
        </member>
        <member name="T:ILGPU.Algorithms.HistogramExtensions.ComputeSingleBinAdapterInt32`2">
            <summary>
            Adapter to convert single-bin operation into a multi-bin operation for
            histograms of type int.
            </summary>
            <typeparam name="T">
            The underlying type of the histogram operation.
            </typeparam>
            <typeparam name="TLocator">
            The operation to compute the bin location.
            </typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.HistogramExtensions.Histogram``2(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{``0},ILGPU.ArrayView{System.Int64},ILGPU.ArrayView{System.Int32})">
            <summary>
            Calculates the histogram (long) on the given 1D view.
            </summary>
            <typeparam name="T">The input view element type.</typeparam>
            <typeparam name="TLocator">
            The operation to compute the bin location.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The input view.</param>
            <param name="histogram">The histogram view to update.</param>
            <param name="histogramOverflow">
            Single-element view that indicates whether the histogram has overflowed.
            </param>
        </member>
        <member name="M:ILGPU.Algorithms.HistogramExtensions.Histogram2D``2(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView2D{``0},ILGPU.ArrayView{System.Int64},ILGPU.ArrayView{System.Int32})">
            <summary>
            Calculates the histogram (long) on the given 2D view.
            </summary>
            <typeparam name="T">The input view element type.</typeparam>
            <typeparam name="TLocator">
            The operation to compute the bin location.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The input view.</param>
            <param name="histogram">The histogram view to update.</param>
            <param name="histogramOverflow">
            Single-element view that indicates whether the histogram has overflowed.
            </param>
        </member>
        <member name="M:ILGPU.Algorithms.HistogramExtensions.Histogram3D``2(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView3D{``0},ILGPU.ArrayView{System.Int64},ILGPU.ArrayView{System.Int32})">
            <summary>
            Calculates the histogram (long) on the given 3D view.
            </summary>
            <typeparam name="T">The input view element type.</typeparam>
            <typeparam name="TLocator">
            The operation to compute the bin location.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The input view.</param>
            <param name="histogram">The histogram view to update.</param>
            <param name="histogramOverflow">
            Single-element view that indicates whether the histogram has overflowed.
            </param>
        </member>
        <member name="T:ILGPU.Algorithms.HistogramExtensions.ComputeSingleBinAdapterInt64`2">
            <summary>
            Adapter to convert single-bin operation into a multi-bin operation for
            histograms of type long.
            </summary>
            <typeparam name="T">
            The underlying type of the histogram operation.
            </typeparam>
            <typeparam name="TLocator">
            The operation to compute the bin location.
            </typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.HistogramExtensions.Histogram``2(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{``0},ILGPU.ArrayView{System.UInt32},ILGPU.ArrayView{System.Int32})">
            <summary>
            Calculates the histogram (uint) on the given 1D view.
            </summary>
            <typeparam name="T">The input view element type.</typeparam>
            <typeparam name="TLocator">
            The operation to compute the bin location.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The input view.</param>
            <param name="histogram">The histogram view to update.</param>
            <param name="histogramOverflow">
            Single-element view that indicates whether the histogram has overflowed.
            </param>
        </member>
        <member name="M:ILGPU.Algorithms.HistogramExtensions.Histogram2D``2(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView2D{``0},ILGPU.ArrayView{System.UInt32},ILGPU.ArrayView{System.Int32})">
            <summary>
            Calculates the histogram (uint) on the given 2D view.
            </summary>
            <typeparam name="T">The input view element type.</typeparam>
            <typeparam name="TLocator">
            The operation to compute the bin location.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The input view.</param>
            <param name="histogram">The histogram view to update.</param>
            <param name="histogramOverflow">
            Single-element view that indicates whether the histogram has overflowed.
            </param>
        </member>
        <member name="M:ILGPU.Algorithms.HistogramExtensions.Histogram3D``2(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView3D{``0},ILGPU.ArrayView{System.UInt32},ILGPU.ArrayView{System.Int32})">
            <summary>
            Calculates the histogram (uint) on the given 3D view.
            </summary>
            <typeparam name="T">The input view element type.</typeparam>
            <typeparam name="TLocator">
            The operation to compute the bin location.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The input view.</param>
            <param name="histogram">The histogram view to update.</param>
            <param name="histogramOverflow">
            Single-element view that indicates whether the histogram has overflowed.
            </param>
        </member>
        <member name="T:ILGPU.Algorithms.HistogramExtensions.ComputeSingleBinAdapterUInt32`2">
            <summary>
            Adapter to convert single-bin operation into a multi-bin operation for
            histograms of type uint.
            </summary>
            <typeparam name="T">
            The underlying type of the histogram operation.
            </typeparam>
            <typeparam name="TLocator">
            The operation to compute the bin location.
            </typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.HistogramExtensions.Histogram``2(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{``0},ILGPU.ArrayView{System.UInt64},ILGPU.ArrayView{System.Int32})">
            <summary>
            Calculates the histogram (ulong) on the given 1D view.
            </summary>
            <typeparam name="T">The input view element type.</typeparam>
            <typeparam name="TLocator">
            The operation to compute the bin location.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The input view.</param>
            <param name="histogram">The histogram view to update.</param>
            <param name="histogramOverflow">
            Single-element view that indicates whether the histogram has overflowed.
            </param>
        </member>
        <member name="M:ILGPU.Algorithms.HistogramExtensions.Histogram2D``2(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView2D{``0},ILGPU.ArrayView{System.UInt64},ILGPU.ArrayView{System.Int32})">
            <summary>
            Calculates the histogram (ulong) on the given 2D view.
            </summary>
            <typeparam name="T">The input view element type.</typeparam>
            <typeparam name="TLocator">
            The operation to compute the bin location.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The input view.</param>
            <param name="histogram">The histogram view to update.</param>
            <param name="histogramOverflow">
            Single-element view that indicates whether the histogram has overflowed.
            </param>
        </member>
        <member name="M:ILGPU.Algorithms.HistogramExtensions.Histogram3D``2(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView3D{``0},ILGPU.ArrayView{System.UInt64},ILGPU.ArrayView{System.Int32})">
            <summary>
            Calculates the histogram (ulong) on the given 3D view.
            </summary>
            <typeparam name="T">The input view element type.</typeparam>
            <typeparam name="TLocator">
            The operation to compute the bin location.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The input view.</param>
            <param name="histogram">The histogram view to update.</param>
            <param name="histogramOverflow">
            Single-element view that indicates whether the histogram has overflowed.
            </param>
        </member>
        <member name="T:ILGPU.Algorithms.HistogramExtensions.ComputeSingleBinAdapterUInt64`2">
            <summary>
            Adapter to convert single-bin operation into a multi-bin operation for
            histograms of type ulong.
            </summary>
            <typeparam name="T">
            The underlying type of the histogram operation.
            </typeparam>
            <typeparam name="TLocator">
            The operation to compute the bin location.
            </typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.HistogramExtensions.Histogram``2(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{``0},ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Int32})">
            <summary>
            Calculates the histogram (float) on the given 1D view.
            </summary>
            <typeparam name="T">The input view element type.</typeparam>
            <typeparam name="TLocator">
            The operation to compute the bin location.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The input view.</param>
            <param name="histogram">The histogram view to update.</param>
            <param name="histogramOverflow">
            Single-element view that indicates whether the histogram has overflowed.
            </param>
        </member>
        <member name="M:ILGPU.Algorithms.HistogramExtensions.Histogram2D``2(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView2D{``0},ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Int32})">
            <summary>
            Calculates the histogram (float) on the given 2D view.
            </summary>
            <typeparam name="T">The input view element type.</typeparam>
            <typeparam name="TLocator">
            The operation to compute the bin location.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The input view.</param>
            <param name="histogram">The histogram view to update.</param>
            <param name="histogramOverflow">
            Single-element view that indicates whether the histogram has overflowed.
            </param>
        </member>
        <member name="M:ILGPU.Algorithms.HistogramExtensions.Histogram3D``2(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView3D{``0},ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Int32})">
            <summary>
            Calculates the histogram (float) on the given 3D view.
            </summary>
            <typeparam name="T">The input view element type.</typeparam>
            <typeparam name="TLocator">
            The operation to compute the bin location.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The input view.</param>
            <param name="histogram">The histogram view to update.</param>
            <param name="histogramOverflow">
            Single-element view that indicates whether the histogram has overflowed.
            </param>
        </member>
        <member name="T:ILGPU.Algorithms.HistogramExtensions.ComputeSingleBinAdapterFloat`2">
            <summary>
            Adapter to convert single-bin operation into a multi-bin operation for
            histograms of type float.
            </summary>
            <typeparam name="T">
            The underlying type of the histogram operation.
            </typeparam>
            <typeparam name="TLocator">
            The operation to compute the bin location.
            </typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.HistogramExtensions.Histogram``2(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{``0},ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Int32})">
            <summary>
            Calculates the histogram (double) on the given 1D view.
            </summary>
            <typeparam name="T">The input view element type.</typeparam>
            <typeparam name="TLocator">
            The operation to compute the bin location.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The input view.</param>
            <param name="histogram">The histogram view to update.</param>
            <param name="histogramOverflow">
            Single-element view that indicates whether the histogram has overflowed.
            </param>
        </member>
        <member name="M:ILGPU.Algorithms.HistogramExtensions.Histogram2D``2(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView2D{``0},ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Int32})">
            <summary>
            Calculates the histogram (double) on the given 2D view.
            </summary>
            <typeparam name="T">The input view element type.</typeparam>
            <typeparam name="TLocator">
            The operation to compute the bin location.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The input view.</param>
            <param name="histogram">The histogram view to update.</param>
            <param name="histogramOverflow">
            Single-element view that indicates whether the histogram has overflowed.
            </param>
        </member>
        <member name="M:ILGPU.Algorithms.HistogramExtensions.Histogram3D``2(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView3D{``0},ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Int32})">
            <summary>
            Calculates the histogram (double) on the given 3D view.
            </summary>
            <typeparam name="T">The input view element type.</typeparam>
            <typeparam name="TLocator">
            The operation to compute the bin location.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The input view.</param>
            <param name="histogram">The histogram view to update.</param>
            <param name="histogramOverflow">
            Single-element view that indicates whether the histogram has overflowed.
            </param>
        </member>
        <member name="T:ILGPU.Algorithms.HistogramExtensions.ComputeSingleBinAdapterDouble`2">
            <summary>
            Adapter to convert single-bin operation into a multi-bin operation for
            histograms of type double.
            </summary>
            <typeparam name="T">
            The underlying type of the histogram operation.
            </typeparam>
            <typeparam name="TLocator">
            The operation to compute the bin location.
            </typeparam>
        </member>
        <member name="T:ILGPU.Algorithms.HistogramOperations.HistogramIncrementInt32">
            <summary>
            Represents atomically incrementing a histogram bin of type int.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.HistogramOperations.HistogramIncrementInt32.Increment(System.Int32@,System.Boolean@)">
            <summary>
            Atomically increments a histogram bin of type int.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.HistogramOperations.HistogramIncrementInt64">
            <summary>
            Represents atomically incrementing a histogram bin of type long.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.HistogramOperations.HistogramIncrementInt64.Increment(System.Int64@,System.Boolean@)">
            <summary>
            Atomically increments a histogram bin of type long.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.HistogramOperations.HistogramIncrementUInt32">
            <summary>
            Represents atomically incrementing a histogram bin of type uint.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.HistogramOperations.HistogramIncrementUInt32.Increment(System.UInt32@,System.Boolean@)">
            <summary>
            Atomically increments a histogram bin of type uint.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.HistogramOperations.HistogramIncrementUInt64">
            <summary>
            Represents atomically incrementing a histogram bin of type ulong.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.HistogramOperations.HistogramIncrementUInt64.Increment(System.UInt64@,System.Boolean@)">
            <summary>
            Atomically increments a histogram bin of type ulong.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.HistogramOperations.HistogramIncrementFloat">
            <summary>
            Represents atomically incrementing a histogram bin of type float.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.HistogramOperations.HistogramIncrementFloat.Increment(System.Single@,System.Boolean@)">
            <summary>
            Atomically increments a histogram bin of type float.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.HistogramOperations.HistogramIncrementDouble">
            <summary>
            Represents atomically incrementing a histogram bin of type double.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.HistogramOperations.HistogramIncrementDouble.Increment(System.Double@,System.Boolean@)">
            <summary>
            Atomically increments a histogram bin of type double.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.HistogramOperations.IComputeSingleBinOperation`2">
            <summary>
            Computes the histogram bin for a single input value.
            </summary>
            <typeparam name="T">The underlying type of the histogram operation.</typeparam>
            <typeparam name="TIndex">The index type.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.HistogramOperations.IComputeSingleBinOperation`2.ComputeHistogramBin(`0,`1)">
            <summary>
            Calculates the histogram bin location for the given value.
            </summary>
            <param name="value">The value to map.</param>
            <param name="numBins">The total  number of bins.</param>
            <returns>The bin location</returns>
        </member>
        <member name="T:ILGPU.Algorithms.HistogramOperations.IComputeMultiBinOperation`3">
            <summary>
            Computes and updates multiple histogram bins for a single input value.
            </summary>
            <typeparam name="T">The underlying type of the histogram operation.</typeparam>
            <typeparam name="TBinType">The underlying type of the histogram bins.</typeparam>
            <typeparam name="TIncrementor">
            The operation to increment the value of the bin.
            </typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.HistogramOperations.IComputeMultiBinOperation`3.ComputeHistogramBins(`0,ILGPU.ArrayView{`1},`2@,System.Boolean@)">
            <summary>
            Calculates and updates multiple histogram bin locations for the given value.
            </summary>
            <param name="value">The value to map.</param>
            <param name="histogram">The histogram to update.</param>
            <param name="incrementOperation">
            The operation used to increment the histogram.
            </param>
            <param name="incrementOverflow">
            Indicates when the increment has overflowed.
            </param>
        </member>
        <member name="T:ILGPU.Algorithms.HistogramOperations.IIncrementOperation`1">
            <summary>
            Increments the value in a histogram bin.
            </summary>
            <typeparam name="TBinType">The underlying type of the histogram bin.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.HistogramOperations.IIncrementOperation`1.Increment(`0@,System.Boolean@)">
            <summary>
            Increments the histogram bin.
            </summary>
            <param name="target">The bin value to update.</param>
            <param name="incrementOverflow">
            Indicates when the increment has overflowed.
            </param>
        </member>
        <member name="T:ILGPU.Algorithms.IL.ILContext">
            <summary>
            Manages custom IL-specific intrinsics.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.IL.ILContext.ILIntrinsic">
            <summary>
            A wrapper implementation for IL intrinsics.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.IL.ILContext.ILIntrinsic.CanHandleBackend(ILGPU.Backends.Backend)">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicImplementation.CanHandleBackend(ILGPU.Backends.Backend)"/>
        </member>
        <member name="F:ILGPU.Algorithms.IL.ILContext.CPUGroupExtensionsType">
            <summary>
            The <see cref="T:ILGPU.Algorithms.IL.ILGroupExtensions"/> type.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.IL.ILContext.CPUWarpExtensionsType">
            <summary>
            The <see cref="T:ILGPU.Algorithms.IL.ILWarpExtensions"/> type.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.IL.ILContext.RegisterIntrinsicMapping(ILGPU.IR.Intrinsics.IntrinsicImplementationManager,System.Type,System.Type,System.String)">
            <summary>
            Registers an intrinsic mapping.
            </summary>
            <param name="manager">The current manager.</param>
            <param name="sourceType">The source type.</param>
            <param name="targetType">The target type.</param>
            <param name="name">The method name to register.</param>
        </member>
        <member name="T:ILGPU.Algorithms.IL.ILGroupExtensions">
            <summary>
            Custom IL-specific implementations.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.IL.ILGroupExtensions.Reduce``2(``0)">
            <summary cref="M:ILGPU.Algorithms.GroupExtensions.Reduce``2(``0)"/>
        </member>
        <member name="M:ILGPU.Algorithms.IL.ILGroupExtensions.AllReduce``2(``0)">
            <summary cref="M:ILGPU.Algorithms.GroupExtensions.AllReduce``2(``0)"/>
        </member>
        <member name="F:ILGPU.Algorithms.IL.ILGroupExtensions.MaxNumThreadsPerGroup">
            <summary>
            The maximum number of supported thread per group on the
            CPU accelerator for the scan algorithms.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.IL.ILGroupExtensions.ExclusiveScan``2(``0)">
            <summary cref="M:ILGPU.Algorithms.GroupExtensions.ExclusiveScan``2(``0)"/>
        </member>
        <member name="M:ILGPU.Algorithms.IL.ILGroupExtensions.InclusiveScan``2(``0)">
            <summary cref="M:ILGPU.Algorithms.GroupExtensions.InclusiveScan``2(``0)"/>
        </member>
        <member name="M:ILGPU.Algorithms.IL.ILGroupExtensions.ExclusiveScanWithBoundaries``2(``0,ILGPU.Algorithms.ScanReduceOperations.ScanBoundaries{``0}@)">
            <summary cref="M:ILGPU.Algorithms.GroupExtensions.ExclusiveScanWithBoundaries``2(``0,ILGPU.Algorithms.ScanReduceOperations.ScanBoundaries{``0}@)"/>
        </member>
        <member name="M:ILGPU.Algorithms.IL.ILGroupExtensions.InclusiveScanWithBoundaries``2(``0,ILGPU.Algorithms.ScanReduceOperations.ScanBoundaries{``0}@)">
            <summary cref="M:ILGPU.Algorithms.GroupExtensions.InclusiveScanWithBoundaries``2(``0,ILGPU.Algorithms.ScanReduceOperations.ScanBoundaries{``0}@)"/>
        </member>
        <member name="M:ILGPU.Algorithms.IL.ILGroupExtensions.InclusiveScanImplementation``2(``0)">
            <summary>
            Performs a group-wide inclusive scan.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The type of the warp scan logic.</typeparam>
            <param name="value">The value to scan.</param>
            <returns>The resulting value for the current lane.</returns>
        </member>
        <member name="T:ILGPU.Algorithms.IL.ILWarpExtensions">
            <summary>
            Custom IL-specific implementations.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.IL.ILWarpExtensions.Reduce``2(``0)">
            <summary cref="M:ILGPU.Algorithms.WarpExtensions.Reduce``2(``0)"/>
        </member>
        <member name="M:ILGPU.Algorithms.IL.ILWarpExtensions.AllReduce``2(``0)">
            <summary cref="M:ILGPU.Algorithms.WarpExtensions.AllReduce``2(``0)"/>
        </member>
        <member name="M:ILGPU.Algorithms.IL.ILWarpExtensions.ExclusiveScan``2(``0)">
            <summary cref="M:ILGPU.Algorithms.WarpExtensions.ExclusiveScan``2(``0)"/>
        </member>
        <member name="M:ILGPU.Algorithms.IL.ILWarpExtensions.InclusiveScan``2(``0)">
            <summary cref="M:ILGPU.Algorithms.WarpExtensions.InclusiveScan``2(``0)"/>
        </member>
        <member name="T:ILGPU.Algorithms.Initializer`1">
            <summary>
            Performs an initialization on the given view.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The element view.</param>
            <param name="value">The target value.</param>
        </member>
        <member name="T:ILGPU.Algorithms.InitializeExtensions">
            <summary>
            Initialize functionality for accelerators.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.InitializeExtensions.InitializeKernel``1(ILGPU.Index1,ILGPU.ArrayView{``0},``0)">
            <summary>
            The actual initialize implementation.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="index">The current thread index.</param>
            <param name="view">The target view.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:ILGPU.Algorithms.InitializeExtensions.CreateRawInitializer``1(ILGPU.Runtime.Accelerator,ILGPU.Index1@)">
            <summary>
            Creates a raw initializer that is defined by the given element type.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="minDataSize">The minimum data size for maximum occupancy.</param>
            <returns>The loaded initializer.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.InitializeExtensions.CreateInitializer``1(ILGPU.Runtime.Accelerator)">
            <summary>
            Creates an initializer that is defined by the given element type.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="accelerator">The accelerator.</param>
            <returns>The loaded transformer.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.InitializeExtensions.Initialize``1(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{``0},``0)">
            <summary>
            Performs an initialization on the given view.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The element view.</param>
            <param name="value">The target value.</param>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortOperations.IRadixSortOperation`1">
            <summary>
            Implements a radix sort operation.
            </summary>
            <typeparam name="T">The underlying type of the sort operation.</typeparam>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.IRadixSortOperation`1.NumBits">
            <summary>
            Returns the number of bits to sort.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.IRadixSortOperation`1.DefaultValue">
            <summary>
            The default element value.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortOperations.IRadixSortOperation`1.ExtractRadixBits(`0,System.Int32,System.Int32)">
            <summary>
            Converts the given value to a radix-sort compatible value.
            </summary>
            <param name="value">The value to map.</param>
            <param name="shift">The shift amount in bits.</param>
            <param name="bitMask">The lower bit mask bit use.</param>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortOperations.AscendingInt8">
            <summary>
            Represents an ascending radix sort operation of type sbyte.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.AscendingInt8.NumBits">
            <summary>
            Returns the number of bits to sort.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.AscendingInt8.DefaultValue">
            <summary>
            The default element value.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortOperations.AscendingInt8.ExtractRadixBits(System.SByte,System.Int32,System.Int32)">
            <summary>
            Converts the given value to a radix-sort compatible value.
            </summary>
            <param name="value">The value to map.</param>
            <param name="shift">The shift amount in bits.</param>
            <param name="bitMask">The lower bit mask bit use.</param>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortOperations.DescendingInt8">
            <summary>
            Represents a descending radix sort operation of type sbyte.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.DescendingInt8.NumBits">
            <summary>
            Returns the number of bits to sort.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.DescendingInt8.DefaultValue">
            <summary>
            The default element value.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortOperations.DescendingInt8.ExtractRadixBits(System.SByte,System.Int32,System.Int32)">
            <summary>
            Converts the given value to a radix-sort compatible value.
            </summary>
            <param name="value">The value to map.</param>
            <param name="shift">The shift amount in bits.</param>
            <param name="bitMask">The lower bit mask bit use.</param>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortOperations.AscendingInt16">
            <summary>
            Represents an ascending radix sort operation of type short.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.AscendingInt16.NumBits">
            <summary>
            Returns the number of bits to sort.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.AscendingInt16.DefaultValue">
            <summary>
            The default element value.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortOperations.AscendingInt16.ExtractRadixBits(System.Int16,System.Int32,System.Int32)">
            <summary>
            Converts the given value to a radix-sort compatible value.
            </summary>
            <param name="value">The value to map.</param>
            <param name="shift">The shift amount in bits.</param>
            <param name="bitMask">The lower bit mask bit use.</param>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortOperations.DescendingInt16">
            <summary>
            Represents a descending radix sort operation of type short.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.DescendingInt16.NumBits">
            <summary>
            Returns the number of bits to sort.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.DescendingInt16.DefaultValue">
            <summary>
            The default element value.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortOperations.DescendingInt16.ExtractRadixBits(System.Int16,System.Int32,System.Int32)">
            <summary>
            Converts the given value to a radix-sort compatible value.
            </summary>
            <param name="value">The value to map.</param>
            <param name="shift">The shift amount in bits.</param>
            <param name="bitMask">The lower bit mask bit use.</param>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortOperations.AscendingInt32">
            <summary>
            Represents an ascending radix sort operation of type int.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.AscendingInt32.NumBits">
            <summary>
            Returns the number of bits to sort.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.AscendingInt32.DefaultValue">
            <summary>
            The default element value.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortOperations.AscendingInt32.ExtractRadixBits(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts the given value to a radix-sort compatible value.
            </summary>
            <param name="value">The value to map.</param>
            <param name="shift">The shift amount in bits.</param>
            <param name="bitMask">The lower bit mask bit use.</param>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortOperations.DescendingInt32">
            <summary>
            Represents a descending radix sort operation of type int.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.DescendingInt32.NumBits">
            <summary>
            Returns the number of bits to sort.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.DescendingInt32.DefaultValue">
            <summary>
            The default element value.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortOperations.DescendingInt32.ExtractRadixBits(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts the given value to a radix-sort compatible value.
            </summary>
            <param name="value">The value to map.</param>
            <param name="shift">The shift amount in bits.</param>
            <param name="bitMask">The lower bit mask bit use.</param>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortOperations.AscendingInt64">
            <summary>
            Represents an ascending radix sort operation of type long.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.AscendingInt64.NumBits">
            <summary>
            Returns the number of bits to sort.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.AscendingInt64.DefaultValue">
            <summary>
            The default element value.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortOperations.AscendingInt64.ExtractRadixBits(System.Int64,System.Int32,System.Int32)">
            <summary>
            Converts the given value to a radix-sort compatible value.
            </summary>
            <param name="value">The value to map.</param>
            <param name="shift">The shift amount in bits.</param>
            <param name="bitMask">The lower bit mask bit use.</param>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortOperations.DescendingInt64">
            <summary>
            Represents a descending radix sort operation of type long.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.DescendingInt64.NumBits">
            <summary>
            Returns the number of bits to sort.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.DescendingInt64.DefaultValue">
            <summary>
            The default element value.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortOperations.DescendingInt64.ExtractRadixBits(System.Int64,System.Int32,System.Int32)">
            <summary>
            Converts the given value to a radix-sort compatible value.
            </summary>
            <param name="value">The value to map.</param>
            <param name="shift">The shift amount in bits.</param>
            <param name="bitMask">The lower bit mask bit use.</param>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortOperations.AscendingUInt8">
            <summary>
            Represents an ascending radix sort operation of type byte.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.AscendingUInt8.NumBits">
            <summary>
            Returns the number of bits to sort.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.AscendingUInt8.DefaultValue">
            <summary>
            The default element value.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortOperations.AscendingUInt8.ExtractRadixBits(System.Byte,System.Int32,System.Int32)">
            <summary>
            Converts the given value to a radix-sort compatible value.
            </summary>
            <param name="value">The value to map.</param>
            <param name="shift">The shift amount in bits.</param>
            <param name="bitMask">The lower bit mask bit use.</param>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortOperations.DescendingUInt8">
            <summary>
            Represents a descending radix sort operation of type byte.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.DescendingUInt8.NumBits">
            <summary>
            Returns the number of bits to sort.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.DescendingUInt8.DefaultValue">
            <summary>
            The default element value.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortOperations.DescendingUInt8.ExtractRadixBits(System.Byte,System.Int32,System.Int32)">
            <summary>
            Converts the given value to a radix-sort compatible value.
            </summary>
            <param name="value">The value to map.</param>
            <param name="shift">The shift amount in bits.</param>
            <param name="bitMask">The lower bit mask bit use.</param>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortOperations.AscendingUInt16">
            <summary>
            Represents an ascending radix sort operation of type ushort.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.AscendingUInt16.NumBits">
            <summary>
            Returns the number of bits to sort.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.AscendingUInt16.DefaultValue">
            <summary>
            The default element value.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortOperations.AscendingUInt16.ExtractRadixBits(System.UInt16,System.Int32,System.Int32)">
            <summary>
            Converts the given value to a radix-sort compatible value.
            </summary>
            <param name="value">The value to map.</param>
            <param name="shift">The shift amount in bits.</param>
            <param name="bitMask">The lower bit mask bit use.</param>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortOperations.DescendingUInt16">
            <summary>
            Represents a descending radix sort operation of type ushort.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.DescendingUInt16.NumBits">
            <summary>
            Returns the number of bits to sort.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.DescendingUInt16.DefaultValue">
            <summary>
            The default element value.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortOperations.DescendingUInt16.ExtractRadixBits(System.UInt16,System.Int32,System.Int32)">
            <summary>
            Converts the given value to a radix-sort compatible value.
            </summary>
            <param name="value">The value to map.</param>
            <param name="shift">The shift amount in bits.</param>
            <param name="bitMask">The lower bit mask bit use.</param>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortOperations.AscendingUInt32">
            <summary>
            Represents an ascending radix sort operation of type uint.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.AscendingUInt32.NumBits">
            <summary>
            Returns the number of bits to sort.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.AscendingUInt32.DefaultValue">
            <summary>
            The default element value.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortOperations.AscendingUInt32.ExtractRadixBits(System.UInt32,System.Int32,System.Int32)">
            <summary>
            Converts the given value to a radix-sort compatible value.
            </summary>
            <param name="value">The value to map.</param>
            <param name="shift">The shift amount in bits.</param>
            <param name="bitMask">The lower bit mask bit use.</param>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortOperations.DescendingUInt32">
            <summary>
            Represents a descending radix sort operation of type uint.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.DescendingUInt32.NumBits">
            <summary>
            Returns the number of bits to sort.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.DescendingUInt32.DefaultValue">
            <summary>
            The default element value.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortOperations.DescendingUInt32.ExtractRadixBits(System.UInt32,System.Int32,System.Int32)">
            <summary>
            Converts the given value to a radix-sort compatible value.
            </summary>
            <param name="value">The value to map.</param>
            <param name="shift">The shift amount in bits.</param>
            <param name="bitMask">The lower bit mask bit use.</param>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortOperations.AscendingUInt64">
            <summary>
            Represents an ascending radix sort operation of type ulong.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.AscendingUInt64.NumBits">
            <summary>
            Returns the number of bits to sort.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.AscendingUInt64.DefaultValue">
            <summary>
            The default element value.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortOperations.AscendingUInt64.ExtractRadixBits(System.UInt64,System.Int32,System.Int32)">
            <summary>
            Converts the given value to a radix-sort compatible value.
            </summary>
            <param name="value">The value to map.</param>
            <param name="shift">The shift amount in bits.</param>
            <param name="bitMask">The lower bit mask bit use.</param>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortOperations.DescendingUInt64">
            <summary>
            Represents a descending radix sort operation of type ulong.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.DescendingUInt64.NumBits">
            <summary>
            Returns the number of bits to sort.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.DescendingUInt64.DefaultValue">
            <summary>
            The default element value.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortOperations.DescendingUInt64.ExtractRadixBits(System.UInt64,System.Int32,System.Int32)">
            <summary>
            Converts the given value to a radix-sort compatible value.
            </summary>
            <param name="value">The value to map.</param>
            <param name="shift">The shift amount in bits.</param>
            <param name="bitMask">The lower bit mask bit use.</param>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortOperations.AscendingHalf">
            <summary>
            Represents an ascending radix sort operation of type Half.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.AscendingHalf.NumBits">
            <summary>
            Returns the number of bits to sort.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.AscendingHalf.DefaultValue">
            <summary>
            The default element value.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortOperations.AscendingHalf.ExtractRadixBits(ILGPU.Half,System.Int32,System.Int32)">
            <summary>
            Converts the given value to a radix-sort compatible value.
            </summary>
            <param name="value">The value to map.</param>
            <param name="shift">The shift amount in bits.</param>
            <param name="bitMask">The lower bit mask bit use.</param>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortOperations.DescendingHalf">
            <summary>
            Represents a descending radix sort operation of type Half.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.DescendingHalf.NumBits">
            <summary>
            Returns the number of bits to sort.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.DescendingHalf.DefaultValue">
            <summary>
            The default element value.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortOperations.DescendingHalf.ExtractRadixBits(ILGPU.Half,System.Int32,System.Int32)">
            <summary>
            Converts the given value to a radix-sort compatible value.
            </summary>
            <param name="value">The value to map.</param>
            <param name="shift">The shift amount in bits.</param>
            <param name="bitMask">The lower bit mask bit use.</param>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortOperations.AscendingFloat">
            <summary>
            Represents an ascending radix sort operation of type float.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.AscendingFloat.NumBits">
            <summary>
            Returns the number of bits to sort.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.AscendingFloat.DefaultValue">
            <summary>
            The default element value.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortOperations.AscendingFloat.ExtractRadixBits(System.Single,System.Int32,System.Int32)">
            <summary>
            Converts the given value to a radix-sort compatible value.
            </summary>
            <param name="value">The value to map.</param>
            <param name="shift">The shift amount in bits.</param>
            <param name="bitMask">The lower bit mask bit use.</param>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortOperations.DescendingFloat">
            <summary>
            Represents a descending radix sort operation of type float.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.DescendingFloat.NumBits">
            <summary>
            Returns the number of bits to sort.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.DescendingFloat.DefaultValue">
            <summary>
            The default element value.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortOperations.DescendingFloat.ExtractRadixBits(System.Single,System.Int32,System.Int32)">
            <summary>
            Converts the given value to a radix-sort compatible value.
            </summary>
            <param name="value">The value to map.</param>
            <param name="shift">The shift amount in bits.</param>
            <param name="bitMask">The lower bit mask bit use.</param>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortOperations.AscendingDouble">
            <summary>
            Represents an ascending radix sort operation of type double.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.AscendingDouble.NumBits">
            <summary>
            Returns the number of bits to sort.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.AscendingDouble.DefaultValue">
            <summary>
            The default element value.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortOperations.AscendingDouble.ExtractRadixBits(System.Double,System.Int32,System.Int32)">
            <summary>
            Converts the given value to a radix-sort compatible value.
            </summary>
            <param name="value">The value to map.</param>
            <param name="shift">The shift amount in bits.</param>
            <param name="bitMask">The lower bit mask bit use.</param>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortOperations.DescendingDouble">
            <summary>
            Represents a descending radix sort operation of type double.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.DescendingDouble.NumBits">
            <summary>
            Returns the number of bits to sort.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.DescendingDouble.DefaultValue">
            <summary>
            The default element value.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortOperations.DescendingDouble.ExtractRadixBits(System.Double,System.Int32,System.Int32)">
            <summary>
            Converts the given value to a radix-sort compatible value.
            </summary>
            <param name="value">The value to map.</param>
            <param name="shift">The shift amount in bits.</param>
            <param name="bitMask">The lower bit mask bit use.</param>
        </member>
        <member name="T:ILGPU.Algorithms.ScanReduceOperations.IScanReduceOperation`1">
            <summary>
            Implements a scan or a reduction operation.
            </summary>
            <typeparam name="T">The underlying type of the scan operation.</typeparam>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.IScanReduceOperation`1.CLCommand">
            <summary>
            Returns the associated OpenCL command suffix for the internal code generator
            to build the final OpenCL command to use.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.IScanReduceOperation`1.Identity">
            <summary>
            Returns the identity value (the neutral element of the operation), such that
            Apply(Apply(Identity, left), right) == Apply(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.IScanReduceOperation`1.Apply(`0,`0)">
            <summary>
            Applies the current operation.
            </summary>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.IScanReduceOperation`1.AtomicApply(`0@,`0)">
            <summary>
            Performs an atomic operation of the form target =
            AtomicUpdate(target.Value, value).
            </summary>
            <param name="target">The target address to update.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:ILGPU.Algorithms.ScanReduceOperations.ScanBoundaries`1">
            <summary>
            Holds the left and the right boundary of a scan operation.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.ScanBoundaries`1.#ctor(`0,`0)">
            <summary>
            Constructs a new scan-boundaries instance.
            </summary>
            <param name="leftBoundary">The left boundary.</param>
            <param name="rightBoundary">The right boundary.</param>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.ScanBoundaries`1.LeftBoundary">
            <summary>
            The left boundary.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.ScanBoundaries`1.RightBoundary">
            <summary>
            The right boundary.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.ScanBoundaries`1.ToString">
            <summary>
            Returns the string representation of these boundary values.
            </summary>
            <returns>The string representation of these boundary values.</returns>
        </member>
        <member name="T:ILGPU.Algorithms.ScanReduceOperations.AddInt32">
            <summary>
            Represents an Add reduction of type int.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.AddInt32.CLCommand">
            <summary>
            Returns the associated OpenCL command suffix for the internal code generator
            to build the final OpenCL command to use.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.AddInt32.Identity">
            <summary>
            Returns the identity value (the neutral element of the operation), such that
            Apply(Apply(Identity, left), right) == Apply(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.AddInt32.Apply(System.Int32,System.Int32)">
            <summary>
            Applies the current operation.
            </summary>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.AddInt32.AtomicApply(System.Int32@,System.Int32)">
            <summary>
            Performs an atomic operation of the form target = AtomicUpdate(target.Value, value).
            </summary>
            <param name="target">The target address to update.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:ILGPU.Algorithms.ScanReduceOperations.MaxInt32">
            <summary>
            Represents an Max reduction of type int.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.MaxInt32.CLCommand">
            <summary>
            Returns the associated OpenCL command suffix for the internal code generator
            to build the final OpenCL command to use.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.MaxInt32.Identity">
            <summary>
            Returns the identity value (the neutral element of the operation), such that
            Apply(Apply(Identity, left), right) == Apply(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.MaxInt32.Apply(System.Int32,System.Int32)">
            <summary>
            Applies the current operation.
            </summary>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.MaxInt32.AtomicApply(System.Int32@,System.Int32)">
            <summary>
            Performs an atomic operation of the form target = AtomicUpdate(target.Value, value).
            </summary>
            <param name="target">The target address to update.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:ILGPU.Algorithms.ScanReduceOperations.MinInt32">
            <summary>
            Represents an Min reduction of type int.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.MinInt32.CLCommand">
            <summary>
            Returns the associated OpenCL command suffix for the internal code generator
            to build the final OpenCL command to use.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.MinInt32.Identity">
            <summary>
            Returns the identity value (the neutral element of the operation), such that
            Apply(Apply(Identity, left), right) == Apply(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.MinInt32.Apply(System.Int32,System.Int32)">
            <summary>
            Applies the current operation.
            </summary>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.MinInt32.AtomicApply(System.Int32@,System.Int32)">
            <summary>
            Performs an atomic operation of the form target = AtomicUpdate(target.Value, value).
            </summary>
            <param name="target">The target address to update.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:ILGPU.Algorithms.ScanReduceOperations.AddInt64">
            <summary>
            Represents an Add reduction of type long.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.AddInt64.CLCommand">
            <summary>
            Returns the associated OpenCL command suffix for the internal code generator
            to build the final OpenCL command to use.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.AddInt64.Identity">
            <summary>
            Returns the identity value (the neutral element of the operation), such that
            Apply(Apply(Identity, left), right) == Apply(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.AddInt64.Apply(System.Int64,System.Int64)">
            <summary>
            Applies the current operation.
            </summary>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.AddInt64.AtomicApply(System.Int64@,System.Int64)">
            <summary>
            Performs an atomic operation of the form target = AtomicUpdate(target.Value, value).
            </summary>
            <param name="target">The target address to update.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:ILGPU.Algorithms.ScanReduceOperations.MaxInt64">
            <summary>
            Represents an Max reduction of type long.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.MaxInt64.CLCommand">
            <summary>
            Returns the associated OpenCL command suffix for the internal code generator
            to build the final OpenCL command to use.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.MaxInt64.Identity">
            <summary>
            Returns the identity value (the neutral element of the operation), such that
            Apply(Apply(Identity, left), right) == Apply(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.MaxInt64.Apply(System.Int64,System.Int64)">
            <summary>
            Applies the current operation.
            </summary>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.MaxInt64.AtomicApply(System.Int64@,System.Int64)">
            <summary>
            Performs an atomic operation of the form target = AtomicUpdate(target.Value, value).
            </summary>
            <param name="target">The target address to update.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:ILGPU.Algorithms.ScanReduceOperations.MinInt64">
            <summary>
            Represents an Min reduction of type long.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.MinInt64.CLCommand">
            <summary>
            Returns the associated OpenCL command suffix for the internal code generator
            to build the final OpenCL command to use.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.MinInt64.Identity">
            <summary>
            Returns the identity value (the neutral element of the operation), such that
            Apply(Apply(Identity, left), right) == Apply(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.MinInt64.Apply(System.Int64,System.Int64)">
            <summary>
            Applies the current operation.
            </summary>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.MinInt64.AtomicApply(System.Int64@,System.Int64)">
            <summary>
            Performs an atomic operation of the form target = AtomicUpdate(target.Value, value).
            </summary>
            <param name="target">The target address to update.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:ILGPU.Algorithms.ScanReduceOperations.AddUInt32">
            <summary>
            Represents an Add reduction of type uint.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.AddUInt32.CLCommand">
            <summary>
            Returns the associated OpenCL command suffix for the internal code generator
            to build the final OpenCL command to use.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.AddUInt32.Identity">
            <summary>
            Returns the identity value (the neutral element of the operation), such that
            Apply(Apply(Identity, left), right) == Apply(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.AddUInt32.Apply(System.UInt32,System.UInt32)">
            <summary>
            Applies the current operation.
            </summary>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.AddUInt32.AtomicApply(System.UInt32@,System.UInt32)">
            <summary>
            Performs an atomic operation of the form target = AtomicUpdate(target.Value, value).
            </summary>
            <param name="target">The target address to update.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:ILGPU.Algorithms.ScanReduceOperations.MaxUInt32">
            <summary>
            Represents an Max reduction of type uint.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.MaxUInt32.CLCommand">
            <summary>
            Returns the associated OpenCL command suffix for the internal code generator
            to build the final OpenCL command to use.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.MaxUInt32.Identity">
            <summary>
            Returns the identity value (the neutral element of the operation), such that
            Apply(Apply(Identity, left), right) == Apply(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.MaxUInt32.Apply(System.UInt32,System.UInt32)">
            <summary>
            Applies the current operation.
            </summary>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.MaxUInt32.AtomicApply(System.UInt32@,System.UInt32)">
            <summary>
            Performs an atomic operation of the form target = AtomicUpdate(target.Value, value).
            </summary>
            <param name="target">The target address to update.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:ILGPU.Algorithms.ScanReduceOperations.MinUInt32">
            <summary>
            Represents an Min reduction of type uint.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.MinUInt32.CLCommand">
            <summary>
            Returns the associated OpenCL command suffix for the internal code generator
            to build the final OpenCL command to use.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.MinUInt32.Identity">
            <summary>
            Returns the identity value (the neutral element of the operation), such that
            Apply(Apply(Identity, left), right) == Apply(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.MinUInt32.Apply(System.UInt32,System.UInt32)">
            <summary>
            Applies the current operation.
            </summary>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.MinUInt32.AtomicApply(System.UInt32@,System.UInt32)">
            <summary>
            Performs an atomic operation of the form target = AtomicUpdate(target.Value, value).
            </summary>
            <param name="target">The target address to update.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:ILGPU.Algorithms.ScanReduceOperations.AddUInt64">
            <summary>
            Represents an Add reduction of type ulong.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.AddUInt64.CLCommand">
            <summary>
            Returns the associated OpenCL command suffix for the internal code generator
            to build the final OpenCL command to use.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.AddUInt64.Identity">
            <summary>
            Returns the identity value (the neutral element of the operation), such that
            Apply(Apply(Identity, left), right) == Apply(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.AddUInt64.Apply(System.UInt64,System.UInt64)">
            <summary>
            Applies the current operation.
            </summary>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.AddUInt64.AtomicApply(System.UInt64@,System.UInt64)">
            <summary>
            Performs an atomic operation of the form target = AtomicUpdate(target.Value, value).
            </summary>
            <param name="target">The target address to update.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:ILGPU.Algorithms.ScanReduceOperations.MaxUInt64">
            <summary>
            Represents an Max reduction of type ulong.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.MaxUInt64.CLCommand">
            <summary>
            Returns the associated OpenCL command suffix for the internal code generator
            to build the final OpenCL command to use.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.MaxUInt64.Identity">
            <summary>
            Returns the identity value (the neutral element of the operation), such that
            Apply(Apply(Identity, left), right) == Apply(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.MaxUInt64.Apply(System.UInt64,System.UInt64)">
            <summary>
            Applies the current operation.
            </summary>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.MaxUInt64.AtomicApply(System.UInt64@,System.UInt64)">
            <summary>
            Performs an atomic operation of the form target = AtomicUpdate(target.Value, value).
            </summary>
            <param name="target">The target address to update.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:ILGPU.Algorithms.ScanReduceOperations.MinUInt64">
            <summary>
            Represents an Min reduction of type ulong.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.MinUInt64.CLCommand">
            <summary>
            Returns the associated OpenCL command suffix for the internal code generator
            to build the final OpenCL command to use.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.MinUInt64.Identity">
            <summary>
            Returns the identity value (the neutral element of the operation), such that
            Apply(Apply(Identity, left), right) == Apply(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.MinUInt64.Apply(System.UInt64,System.UInt64)">
            <summary>
            Applies the current operation.
            </summary>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.MinUInt64.AtomicApply(System.UInt64@,System.UInt64)">
            <summary>
            Performs an atomic operation of the form target = AtomicUpdate(target.Value, value).
            </summary>
            <param name="target">The target address to update.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:ILGPU.Algorithms.ScanReduceOperations.AddFloat">
            <summary>
            Represents an Add reduction of type float.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.AddFloat.CLCommand">
            <summary>
            Returns the associated OpenCL command suffix for the internal code generator
            to build the final OpenCL command to use.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.AddFloat.Identity">
            <summary>
            Returns the identity value (the neutral element of the operation), such that
            Apply(Apply(Identity, left), right) == Apply(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.AddFloat.Apply(System.Single,System.Single)">
            <summary>
            Applies the current operation.
            </summary>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.AddFloat.AtomicApply(System.Single@,System.Single)">
            <summary>
            Performs an atomic operation of the form target = AtomicUpdate(target.Value, value).
            </summary>
            <param name="target">The target address to update.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:ILGPU.Algorithms.ScanReduceOperations.MaxFloat">
            <summary>
            Represents an Max reduction of type float.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.MaxFloat.CLCommand">
            <summary>
            Returns the associated OpenCL command suffix for the internal code generator
            to build the final OpenCL command to use.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.MaxFloat.Identity">
            <summary>
            Returns the identity value (the neutral element of the operation), such that
            Apply(Apply(Identity, left), right) == Apply(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.MaxFloat.Apply(System.Single,System.Single)">
            <summary>
            Applies the current operation.
            </summary>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.MaxFloat.AtomicApply(System.Single@,System.Single)">
            <summary>
            Performs an atomic operation of the form target = AtomicUpdate(target.Value, value).
            </summary>
            <param name="target">The target address to update.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:ILGPU.Algorithms.ScanReduceOperations.MinFloat">
            <summary>
            Represents an Min reduction of type float.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.MinFloat.CLCommand">
            <summary>
            Returns the associated OpenCL command suffix for the internal code generator
            to build the final OpenCL command to use.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.MinFloat.Identity">
            <summary>
            Returns the identity value (the neutral element of the operation), such that
            Apply(Apply(Identity, left), right) == Apply(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.MinFloat.Apply(System.Single,System.Single)">
            <summary>
            Applies the current operation.
            </summary>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.MinFloat.AtomicApply(System.Single@,System.Single)">
            <summary>
            Performs an atomic operation of the form target = AtomicUpdate(target.Value, value).
            </summary>
            <param name="target">The target address to update.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:ILGPU.Algorithms.ScanReduceOperations.AddDouble">
            <summary>
            Represents an Add reduction of type double.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.AddDouble.CLCommand">
            <summary>
            Returns the associated OpenCL command suffix for the internal code generator
            to build the final OpenCL command to use.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.AddDouble.Identity">
            <summary>
            Returns the identity value (the neutral element of the operation), such that
            Apply(Apply(Identity, left), right) == Apply(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.AddDouble.Apply(System.Double,System.Double)">
            <summary>
            Applies the current operation.
            </summary>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.AddDouble.AtomicApply(System.Double@,System.Double)">
            <summary>
            Performs an atomic operation of the form target = AtomicUpdate(target.Value, value).
            </summary>
            <param name="target">The target address to update.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:ILGPU.Algorithms.ScanReduceOperations.MaxDouble">
            <summary>
            Represents an Max reduction of type double.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.MaxDouble.CLCommand">
            <summary>
            Returns the associated OpenCL command suffix for the internal code generator
            to build the final OpenCL command to use.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.MaxDouble.Identity">
            <summary>
            Returns the identity value (the neutral element of the operation), such that
            Apply(Apply(Identity, left), right) == Apply(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.MaxDouble.Apply(System.Double,System.Double)">
            <summary>
            Applies the current operation.
            </summary>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.MaxDouble.AtomicApply(System.Double@,System.Double)">
            <summary>
            Performs an atomic operation of the form target = AtomicUpdate(target.Value, value).
            </summary>
            <param name="target">The target address to update.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:ILGPU.Algorithms.ScanReduceOperations.MinDouble">
            <summary>
            Represents an Min reduction of type double.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.MinDouble.CLCommand">
            <summary>
            Returns the associated OpenCL command suffix for the internal code generator
            to build the final OpenCL command to use.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.MinDouble.Identity">
            <summary>
            Returns the identity value (the neutral element of the operation), such that
            Apply(Apply(Identity, left), right) == Apply(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.MinDouble.Apply(System.Double,System.Double)">
            <summary>
            Applies the current operation.
            </summary>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.MinDouble.AtomicApply(System.Double@,System.Double)">
            <summary>
            Performs an atomic operation of the form target = AtomicUpdate(target.Value, value).
            </summary>
            <param name="target">The target address to update.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:ILGPU.Algorithms.PTX.PTXContext">
            <summary>
            Manages custom PTX-specific intrinsics.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.PTX.PTXContext.PTXMathType">
            <summary>
            The <see cref="T:ILGPU.Algorithms.PTX.PTXMath"/> type.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.PTX.PTXContext.MathCodeGenerator">
            <summary>
            Represents the <see cref="M:ILGPU.Algorithms.PTX.PTXMath.GenerateMathIntrinsic(ILGPU.Backends.PTX.PTXBackend,ILGPU.Backends.PTX.PTXCodeGenerator,ILGPU.IR.Value)"/>
            methods.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.PTX.PTXContext.MathCodeGeneratorIntrinsic">
            <summary>
            Represents the intrinsic representation of the
            <see cref="F:ILGPU.Algorithms.PTX.PTXContext.MathCodeGenerator"/>.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.PTX.PTXContext.PTXGroupExtensionsType">
            <summary>
            The <see cref="T:ILGPU.Algorithms.PTX.PTXGroupExtensions"/> type.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.PTX.PTXContext.PTXWarpExtensionsType">
            <summary>
            The <see cref="T:ILGPU.Algorithms.PTX.PTXWarpExtensions"/> type.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXContext.GetMathIntrinsic(System.String,System.Type[])">
            <summary>
            Resolves a PTX intrinsic for the given math-function configuration.
            </summary>
            <param name="name">The intrinsic name.</param>
            <param name="types">The parameter types.</param>
            <returns>The resolved intrinsic representation.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXContext.RegisterIntrinsicMapping(ILGPU.IR.Intrinsics.IntrinsicImplementationManager,System.Type,System.Type,System.String)">
            <summary>
            Registers an intrinsic mapping.
            </summary>
            <param name="manager">The current manager.</param>
            <param name="sourceType">The source type.</param>
            <param name="targetType">The target type.</param>
            <param name="name">The method name to register.</param>
        </member>
        <member name="T:ILGPU.Algorithms.PTX.PTXGroupExtensions">
            <summary>
            Custom PTX-specific implementations.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXGroupExtensions.Reduce``2(``0)">
            <summary cref="M:ILGPU.Algorithms.GroupExtensions.Reduce``2(``0)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXGroupExtensions.AllReduce``2(``0)">
            <summary cref="M:ILGPU.Algorithms.GroupExtensions.AllReduce``2(``0)"/>
        </member>
        <member name="T:ILGPU.Algorithms.PTX.PTXGroupExtensions.IScanImplementation`2">
            <summary>
            An abstract scan implementation that works on arbitrary types.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The actual scan operation type.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXGroupExtensions.IScanImplementation`2.Scan(`0)">
            <summary>
            Performs a scan using the provided value from every thread.
            </summary>
            <param name="value">The value to scan.</param>
            <returns>The scanned value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXGroupExtensions.IScanImplementation`2.ScanRightBoundary(`0,`0)">
            <summary>
            Scans the right boundary value.
            </summary>
            <param name="boundaryValue">The current boundary value.</param>
            <param name="value">The value to add.</param>
            <returns>The scanned boundary value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXGroupExtensions.IScanImplementation`2.Load(System.Int32,ILGPU.ArrayView{`0})">
            <summary>
            Loads the i-th value from the given view.
            </summary>
            <param name="warpIdx">The warp index.</param>
            <param name="values">The values to load from.</param>
            <returns>The loaded value.</returns>
        </member>
        <member name="T:ILGPU.Algorithms.PTX.PTXGroupExtensions.InclusiveScanImplementation`2">
            <summary>
            Represents an inclusive scan implementation.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The actual scan operation type.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXGroupExtensions.InclusiveScanImplementation`2.Scan(`0)">
            <summary cref="M:ILGPU.Algorithms.PTX.PTXGroupExtensions.IScanImplementation`2.Scan(`0)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXGroupExtensions.InclusiveScanImplementation`2.ScanRightBoundary(`0,`0)">
            <summary cref="M:ILGPU.Algorithms.PTX.PTXGroupExtensions.IScanImplementation`2.ScanRightBoundary(`0,`0)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXGroupExtensions.InclusiveScanImplementation`2.Load(System.Int32,ILGPU.ArrayView{`0})">
            <summary cref="M:ILGPU.Algorithms.PTX.PTXGroupExtensions.IScanImplementation`2.Load(System.Int32,ILGPU.ArrayView{`0})"/>
        </member>
        <member name="T:ILGPU.Algorithms.PTX.PTXGroupExtensions.ExclusiveScanImplementation`2">
            <summary>
            Represents an exclusive scan implementation.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The actual scan operation type.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXGroupExtensions.ExclusiveScanImplementation`2.Scan(`0)">
            <summary cref="M:ILGPU.Algorithms.PTX.PTXGroupExtensions.IScanImplementation`2.Scan(`0)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXGroupExtensions.ExclusiveScanImplementation`2.ScanRightBoundary(`0,`0)">
            <summary cref="M:ILGPU.Algorithms.PTX.PTXGroupExtensions.IScanImplementation`2.ScanRightBoundary(`0,`0)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXGroupExtensions.ExclusiveScanImplementation`2.Load(System.Int32,ILGPU.ArrayView{`0})">
            <summary cref="M:ILGPU.Algorithms.PTX.PTXGroupExtensions.IScanImplementation`2.Load(System.Int32,ILGPU.ArrayView{`0})"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXGroupExtensions.ComputeScan``3(``0,ILGPU.ArrayView{``0}@)">
            <summary>
            The internal intrinsic implementation to realize a single
            scan computation in the scope of a single group.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The actual scan operation type.</typeparam>
            <typeparam name="TScanImplementation">The implementation type.</typeparam>
            <param name="value">The current value.</param>
            <param name="sharedMemory">The resulting shared memory.</param>
            <returns>The scanned value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXGroupExtensions.PerformScan``3(``0)">
            <summary>
            Performs a local scan operation.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The scan operation.</typeparam>
            <typeparam name="TScanImplementation">The scan implementation.</typeparam>
            <param name="value">The value to scan.</param>
            <returns>The scanned value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXGroupExtensions.PerformScan``3(``0,ILGPU.Algorithms.ScanReduceOperations.ScanBoundaries{``0}@)">
            <summary>
            Performs a local scan operation including boundaries.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The scan operation.</typeparam>
            <typeparam name="TScanImplementation">The scan implementation.</typeparam>
            <param name="value">The value to scan.</param>
            <param name="boundaries">The resolved boundaries</param>
            <returns>The scanned value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXGroupExtensions.ExclusiveScan``2(``0)">
            <summary cref="M:ILGPU.Algorithms.GroupExtensions.ExclusiveScan``2(``0)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXGroupExtensions.InclusiveScan``2(``0)">
            <summary cref="M:ILGPU.Algorithms.GroupExtensions.InclusiveScan``2(``0)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXGroupExtensions.ExclusiveScanWithBoundaries``2(``0,ILGPU.Algorithms.ScanReduceOperations.ScanBoundaries{``0}@)">
            <summary cref="M:ILGPU.Algorithms.GroupExtensions.ExclusiveScanWithBoundaries``2(``0,ILGPU.Algorithms.ScanReduceOperations.ScanBoundaries{``0}@)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXGroupExtensions.InclusiveScanWithBoundaries``2(``0,ILGPU.Algorithms.ScanReduceOperations.ScanBoundaries{``0}@)">
            <summary cref="M:ILGPU.Algorithms.GroupExtensions.InclusiveScanWithBoundaries``2(``0,ILGPU.Algorithms.ScanReduceOperations.ScanBoundaries{``0}@)"/>
        </member>
        <member name="T:ILGPU.Algorithms.PTX.PTXMath">
            <summary>
            Custom PTX-specific implementations.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.GenerateMathIntrinsic(ILGPU.Backends.PTX.PTXBackend,ILGPU.Backends.PTX.PTXCodeGenerator,ILGPU.IR.Value)">
            <summary>
            Generates intrinsic math instructions for the following kinds:
            Rcp, Sqrt, Sin, Cos, Exp2, Log2, IsInf, IsNaN
            </summary>
            <param name="backend">The current backend.</param>
            <param name="codeGenerator">The code generator.</param>
            <param name="value">The value to generate code for.</param>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.IsNaN(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.IsNaN(System.Double)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.IsNaN(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.IsNaN(System.Single)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.IsInfinity(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.IsInfinity(System.Double)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.IsInfinity(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.IsInfinity(System.Single)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Rcp(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Rcp(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Rcp(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Rcp(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Rem(System.Double,System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Rem(System.Double,System.Double)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Rem(System.Single,System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Rem(System.Single,System.Single)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Sqrt(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Sqrt(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Sqrt(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Sqrt(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Rsqrt(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Rsqrt(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Rsqrt(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Rsqrt(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Floor(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Floor(System.Double)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Floor(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Floor(System.Single)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Ceiling(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Ceiling(System.Double)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Ceiling(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Ceiling(System.Single)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Sin(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Sin(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Sin(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Sin(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Sinh(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Sinh(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Sinh(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Sinh(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Asin(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Asin(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Asin(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Asin(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Cos(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Cos(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Cos(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Cos(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Cosh(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Cosh(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Cosh(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Cosh(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Acos(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Acos(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Acos(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Acos(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Tan(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Tan(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Tan(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Tan(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Tanh(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Tanh(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Tanh(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Tanh(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Atan(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Atan(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Atan(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Atan(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Atan2(System.Double,System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Atan2(System.Double,System.Double)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Atan2(System.Single,System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Atan2(System.Single,System.Single)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Pow(System.Double,System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Pow(System.Double,System.Double)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Pow(System.Single,System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Pow(System.Single,System.Single)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.IsInteger(System.Double)">
            <summary>
            Tests if a floating point value is an integer
            </summary>
            <param name="value">The value to check</param>
            <returns>True, if the value is an integer</returns>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.IsInteger(System.Single)">
            <summary>
            Tests if a floating point value is an integer
            </summary>
            <param name="value">The value to check</param>
            <returns>True, if the value is an integer</returns>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.IsOddInteger(System.Double)">
            <summary>
            Tests if a floating point value is an odd integer
            </summary>
            <param name="value">The value to check</param>
            <returns>True, if the value is an odd integer</returns>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.IsOddInteger(System.Single)">
            <summary>
            Tests if a floating point value is an odd integer
            </summary>
            <param name="value">The value to check</param>
            <returns>True, if the value is an odd integer</returns>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Exp(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Exp(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Exp(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Exp(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Exp2(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Exp2(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Exp2(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Exp2(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Log(System.Double,System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Log(System.Double,System.Double)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Log(System.Single,System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Log(System.Single,System.Single)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Log(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Log(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Log(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Log(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Log10(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Log10(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Log10(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Log10(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Log2(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Log2(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Log2(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Log2(System.Single)" />
        </member>
        <member name="T:ILGPU.Algorithms.PTX.PTXWarpExtensions">
            <summary>
            Custom PTX-specific implementations.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXWarpExtensions.Reduce``2(``0)">
            <summary cref="M:ILGPU.Algorithms.WarpExtensions.Reduce``2(``0)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXWarpExtensions.AllReduce``2(``0)">
            <summary cref="M:ILGPU.Algorithms.WarpExtensions.AllReduce``2(``0)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXWarpExtensions.ExclusiveScan``2(``0)">
            <summary cref="M:ILGPU.Algorithms.WarpExtensions.ExclusiveScan``2(``0)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXWarpExtensions.InclusiveScan``2(``0)">
            <summary cref="M:ILGPU.Algorithms.WarpExtensions.InclusiveScan``2(``0)"/>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSort`1">
            <summary>
            Represents a radix sort operation using a shuffle and operation logic.
            </summary>
            <typeparam name="T">The underlying type of the sort operation.</typeparam>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The elements to sort.</param>
            <param name="temp">The temp view to store temporary results.</param>
            <remarks>The view buffer will be changed during the sorting operation.</remarks>
        </member>
        <member name="T:ILGPU.Algorithms.BufferedRadixSort`1">
            <summary>
            Represents a radix sort operation using a shuffle and operation logic.
            </summary>
            <typeparam name="T">The underlying type of the sort operation.</typeparam>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The elements to sort.</param>
            <remarks>The view buffer will be changed during the sorting operation.</remarks>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortProvider">
            <summary>
            Represents a radix-sort provider for a radix sort operation.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortProvider.AllocateTempRadixSortView``2(ILGPU.ArrayView{``0})">
            <summary>
            Allocates a temporary memory view.
            </summary>
            <typeparam name="T">The underlying type of the sort operation.</typeparam>
            <typeparam name="TRadixSortOperation">
            The type of the radix-sort operation.
            </typeparam>
            <param name="input">The input view.</param>
            <returns>The allocated temporary view.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortProvider.CreateRadixSort``2">
            <summary>
            Creates a new radix sort operation.
            </summary>
            <typeparam name="T">The underlying type of the sort operation.</typeparam>
            <typeparam name="TRadixSortOperation">
            The type of the radix-sort operation.
            </typeparam>
            <returns>The created radix sort handler.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortProvider.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortExtensions">
            <summary>
            Contains extension methods for radix-sort operations.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortExtensions.Pass1KernelDelegate`1">
            <summary>
            A pass delegate for the first pass.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortExtensions.CPUPass1KernelDelegate`1">
            <summary>
            A pass delegate for the first pass.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortExtensions.Pass2KernelDelegate`1">
            <summary>
            A pass delegate for the second pass.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortExtensions.CPUPass2KernelDelegate`1">
            <summary>
            A pass delegate for the second pass.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortExtensions.ComputeRadixSortTempStorageSize``2(ILGPU.Runtime.Accelerator,ILGPU.Index1)">
            <summary>
            Computes the required number of temp-storage elements for a radix sort
            operation and the given data length.
            </summary>
            <typeparam name="T">The underlying type of the sort operation.</typeparam>
            <typeparam name="TRadixSortOperation">
            The type of the radix-sort operation.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="dataLength">The number of data elements to sort.</param>
            <returns>
            The required number of temp-storage elements in 32 bit ints.
            </returns>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortExtensions.IRadixSortSpecialization">
            <summary>
            Represents a single specialization.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortExtensions.IRadixSortSpecialization.UnrollFactor">
            <summary>
            Returns the associated constant unroll factor.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortExtensions.IRadixSortSpecialization.BitIncrement">
            <summary>
            Returns the number of bits to increment for the
            next radix-sort iteration.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortExtensions.RadixSortKernel1``3(ILGPU.ArrayView{``0},ILGPU.ArrayView{System.Int32},ILGPU.Runtime.SpecializedValue{System.Int32},System.Int32,System.Int32,System.Int32)">
            <summary>
            Performs the first radix-sort pass.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TOperation">The radix-sort operation.</typeparam>
            <typeparam name="TSpecialization">The specialization type.</typeparam>
            <param name="view">The input view to use.</param>
            <param name="counter">The global counter view.</param>
            <param name="groupSize">The number of threads in the group.</param>
            <param name="numGroups">The number of virtually launched groups.</param>
            <param name="paddedLength">The padded length of the input view.</param>
            <param name="shift">The bit shift to use.</param>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortExtensions.CPURadixSortKernel1``3(ILGPU.ArrayView{``0},ILGPU.ArrayView{``0},ILGPU.ArrayView{System.Int32},System.Int32,System.Int32,System.Int32)">
            <summary>
            Performs the first radix-sort pass on the CPU.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TOperation">The radix-sort operation.</typeparam>
            <typeparam name="TSpecialization">The specialization type.</typeparam>
            <param name="input">The input view to use.</param>
            <param name="output">The input view to use.</param>
            <param name="counter">The global counter view.</param>
            <param name="numGroups">The number of virtually launched groups.</param>
            <param name="numIterationsPerGroup">
            The number of iterations per group.
            </param>
            <param name="shift">The bit shift to use.</param>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortExtensions.GetExclusiveCount(ILGPU.Index1,ILGPU.ArrayView{System.Int32})">
            <summary>
            Resolves the exclusive scan-value from the given counter view.
            </summary>
            <param name="index">The current index.</param>
            <param name="counter">The counter view.</param>
            <returns>The exclusive sum.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortExtensions.RadixSortKernel2``3(ILGPU.ArrayView{``0},ILGPU.ArrayView{``0},ILGPU.ArrayView{System.Int32},System.Int32,System.Int32,System.Int32)">
            <summary>
            Performs the second radix-sort pass.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TOperation">The radix-sort operation.</typeparam>
            <typeparam name="TSpecialization">The specialization type.</typeparam>
            <param name="input">The input view to use.</param>
            <param name="output">The output view to use.</param>
            <param name="counter">The global counter view.</param>
            <param name="numGroups">The number of virtually launched groups.</param>
            <param name="paddedLength">The padded length of the input view.</param>
            <param name="shift">The bit shift to use.</param>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortExtensions.CPURadixSortKernel2``3(ILGPU.ArrayView{``0},ILGPU.ArrayView{``0},ILGPU.ArrayView{System.Int32},System.Int32,System.Int32,System.Int32)">
            <summary>
            Performs the second radix-sort pass.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TOperation">The radix-sort operation.</typeparam>
            <typeparam name="TSpecialization">The specialization type.</typeparam>
            <param name="input">The input view to use.</param>
            <param name="output">The output view to use.</param>
            <param name="counter">The global counter view.</param>
            <param name="numGroups">The number of virtually launched groups.</param>
            <param name="numIterationsPerGroup">
            The number of iterations per group.
            </param>
            <param name="shift">The bit shift to use.</param>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortExtensions.Specialization4">
            <summary>
            A specialization with unroll factor 4.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortExtensions.Specialization4.UnrollFactor">
            <summary cref="P:ILGPU.Algorithms.RadixSortExtensions.IRadixSortSpecialization.UnrollFactor"/>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortExtensions.Specialization4.BitIncrement">
            <summary cref="P:ILGPU.Algorithms.RadixSortExtensions.IRadixSortSpecialization.BitIncrement"/>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortExtensions.CreateRadixSort``2(ILGPU.Runtime.Accelerator)">
            <summary>
            Creates a new radix sort operation.
            </summary>
            <typeparam name="T">The underlying type of the sort operation.</typeparam>
            <typeparam name="TRadixSortOperation">
            The type of the radix-sort operation.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <returns>The created radix sort handler.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortExtensions.CreateRadixSortProvider(ILGPU.Runtime.Accelerator)">
            <summary>
            Creates a new specialized radix-sort provider that has its own cache.
            Note that the resulting provider has to be disposed manually.
            </summary>
            <param name="accelerator">The accelerator.</param>
            <returns>The created provider.</returns>
        </member>
        <member name="T:ILGPU.Algorithms.Random.RandomExtensions">
            <summary>
            Represents useful helpers for random generators.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.Random.RandomExtensions.InverseIntDoubleRange">
            <summary>
            1.0 / int.MaxValue
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.Random.RandomExtensions.InverseIntFloatRange">
            <summary>
            1.0 / int.MaxValue
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.Random.RandomExtensions.InverseLongDoubleRange">
            <summary>
            1.0 / long.MaxValue
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.Random.RandomExtensions.InverseLongFloatRange">
            <summary>
            1.0 / long.MaxValue
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.Random.XorShift128">
            <summary>
            Implements a simple and fast xor-shift rng.
            </summary>
            <remarks>https://en.wikipedia.org/wiki/Xorshift</remarks>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128.Create(System.Random)">
            <summary>
            Creates a new rng instance with the help of a CPU-based rng.
            </summary>
            <param name="random">The desired rng.</param>
            <returns>A new rng instance.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Constructs a new rng instance.
            </summary>
            <param name="state0">The initial state value 0.</param>
            <param name="state1">The initial state value 1.</param>
            <param name="state2">The initial state value 2.</param>
            <param name="state3">The initial state value 3.</param>
        </member>
        <member name="P:ILGPU.Algorithms.Random.XorShift128.State0">
            <summary>
            The internal state value 0.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.Random.XorShift128.State1">
            <summary>
            The internal state value 1.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.Random.XorShift128.State2">
            <summary>
            The internal state value 2.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.Random.XorShift128.State3">
            <summary>
            The internal state value 3.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128.Next">
            <summary>
            Generates a random uint in [0..uint.MaxValue].
            </summary>
            <returns>A random uint in [0..uint.MaxValue].</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128.NextDouble">
            <summary>
            Generates a random double in [0..1].
            </summary>
            <returns>A random double in [0..1].</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128.NextFloat">
            <summary>
            Generates a random float in [0..1].
            </summary>
            <returns>A random float in [0..1].</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128.NextInt">
            <summary>
            Generates a random int in [0..int.MaxValue].
            </summary>
            <returns>A random int in [0..int.MaxValue].</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128.Next(System.Int32,System.Int32)">
            <summary>
            Generates a random int in [minValue..maxValue[.
            </summary>
            <param name="minValue">The minimum value (inclusive)</param>
            <param name="maxValue">The maximum values (exclusive)</param>
            <returns>A random int in [minValue..maxValue[.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128.Equals(ILGPU.Algorithms.Random.XorShift128)">
            <summary>
            Returns true iff the given object is equal to the current rng.
            </summary>
            <param name="other">The other rng to test.</param>
            <returns>True, iff the given object is equal to the current rng.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128.GetHashCode">
            <summary>
            Returns the hash code of this rng.
            </summary>
            <returns>The hash code of this rng.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128.Equals(System.Object)">
            <summary>
            Returns true iff the given object is equal to the current rng.
            </summary>
            <param name="obj">The other rng to test.</param>
            <returns>True, iff the given object is equal to the current rng.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128.ToString">
            <summary>
            Returns the string representation of this rng.
            </summary>
            <returns>The string representation of this rng.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128.op_Equality(ILGPU.Algorithms.Random.XorShift128,ILGPU.Algorithms.Random.XorShift128)">
            <summary>
            Returns true iff the first and second rng are the same.
            </summary>
            <param name="first">The first rng.</param>
            <param name="second">The second rng.</param>
            <returns>True, iff the first and second rng are the same.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128.op_Inequality(ILGPU.Algorithms.Random.XorShift128,ILGPU.Algorithms.Random.XorShift128)">
            <summary>
            Returns true iff the first and second rng are not the same.
            </summary>
            <param name="first">The first rng.</param>
            <param name="second">The second rng.</param>
            <returns>True, iff the first and second rng are not the same.</returns>
        </member>
        <member name="T:ILGPU.Algorithms.Random.XorShift128Plus">
            <summary>
            Implements a simple and fast xor-shift rng.
            </summary>
            <remarks>https://en.wikipedia.org/wiki/Xorshift</remarks>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128Plus.Create(System.Random)">
            <summary>
            Creates a new rng instance with the help of a CPU-based rng.
            </summary>
            <param name="random">The desired rng.</param>
            <returns>A new rng instance.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128Plus.#ctor(System.UInt64,System.UInt64)">
            <summary>
            Constructs a new rng instance.
            </summary>
            <param name="state0">The initial state value 0.</param>
            <param name="state1">The initial state value 1.</param>
        </member>
        <member name="P:ILGPU.Algorithms.Random.XorShift128Plus.State0">
            <summary>
            The internal state value 0.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.Random.XorShift128Plus.State1">
            <summary>
            The internal state value 1.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128Plus.Next">
            <summary>
            Generates a random uint in [0..ulong.MaxValue].
            </summary>
            <returns>A random uint in [0..ulong.MaxValue].</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128Plus.NextDouble">
            <summary>
            Generates a random double in [0..1].
            </summary>
            <returns>A random double in [0..1].</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128Plus.NextFloat">
            <summary>
            Generates a random float in [0..1].
            </summary>
            <returns>A random float in [0..1].</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128Plus.NextLong">
            <summary>
            Generates a random int in [0..long.MaxValue].
            </summary>
            <returns>A random int in [0..long.MaxValue].</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128Plus.Next(System.Int64,System.Int64)">
            <summary>
            Generates a random int in [minValue..maxValue[.
            </summary>
            <param name="minValue">The minimum value (inclusive)</param>
            <param name="maxValue">The maximum values (exclusive)</param>
            <returns>A random int in [minValue..maxValue[.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128Plus.Equals(ILGPU.Algorithms.Random.XorShift128Plus)">
            <summary>
            Returns true iff the given object is equal to the current rng.
            </summary>
            <param name="other">The other rng to test.</param>
            <returns>True, iff the given object is equal to the current rng.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128Plus.GetHashCode">
            <summary>
            Returns the hash code of this rng.
            </summary>
            <returns>The hash code of this rng.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128Plus.Equals(System.Object)">
            <summary>
            Returns true iff the given object is equal to the current rng.
            </summary>
            <param name="obj">The other rng to test.</param>
            <returns>True, iff the given object is equal to the current rng.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128Plus.ToString">
            <summary>
            Returns the string representation of this rng.
            </summary>
            <returns>The string representation of this rng.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128Plus.op_Equality(ILGPU.Algorithms.Random.XorShift128Plus,ILGPU.Algorithms.Random.XorShift128Plus)">
            <summary>
            Returns true iff the first and second rng are the same.
            </summary>
            <param name="first">The first rng.</param>
            <param name="second">The second rng.</param>
            <returns>True, iff the first and second rng are the same.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128Plus.op_Inequality(ILGPU.Algorithms.Random.XorShift128Plus,ILGPU.Algorithms.Random.XorShift128Plus)">
            <summary>
            Returns true iff the first and second rng are not the same.
            </summary>
            <param name="first">The first rng.</param>
            <param name="second">The second rng.</param>
            <returns>True, iff the first and second rng are not the same.</returns>
        </member>
        <member name="T:ILGPU.Algorithms.Random.XorShift32">
            <summary>
            Implements a simple and fast xor-shift rng.
            </summary>
            <remarks>https://en.wikipedia.org/wiki/Xorshift</remarks>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift32.Create(System.Random)">
            <summary>
            Creates a new rng instance with the help of a CPU-based rng.
            </summary>
            <param name="random">The desired rng.</param>
            <returns>A new rng instance.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift32.#ctor(System.UInt32)">
            <summary>
            Constructs a new rng instance.
            </summary>
            <param name="state">The initial state value.</param>
        </member>
        <member name="P:ILGPU.Algorithms.Random.XorShift32.State">
            <summary>
            The internal state value.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift32.Next">
            <summary>
            Generates a random uint in [0..uint.MaxValue].
            </summary>
            <returns>A random uint in [0..uint.MaxValue].</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift32.NextDouble">
            <summary>
            Generates a random double in [0..1].
            </summary>
            <returns>A random double in [0..1].</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift32.NextFloat">
            <summary>
            Generates a random float in [0..1].
            </summary>
            <returns>A random float in [0..1].</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift32.NextInt">
            <summary>
            Generates a random int in [0..int.MaxValue].
            </summary>
            <returns>A random int in [0..int.MaxValue].</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift32.Next(System.Int32,System.Int32)">
            <summary>
            Generates a random int in [minValue..maxValue[.
            </summary>
            <param name="minValue">The minimum value (inclusive)</param>
            <param name="maxValue">The maximum values (exclusive)</param>
            <returns>A random int in [minValue..maxValue[.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift32.Equals(ILGPU.Algorithms.Random.XorShift32)">
            <summary>
            Returns true iff the given object is equal to the current rng.
            </summary>
            <param name="other">The other rng to test.</param>
            <returns>True, iff the given object is equal to the current rng.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift32.GetHashCode">
            <summary>
            Returns the hash code of this rng.
            </summary>
            <returns>The hash code of this rng.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift32.Equals(System.Object)">
            <summary>
            Returns true iff the given object is equal to the current rng.
            </summary>
            <param name="obj">The other rng to test.</param>
            <returns>True, iff the given object is equal to the current rng.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift32.ToString">
            <summary>
            Returns the string representation of this rng.
            </summary>
            <returns>The string representation of this rng.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift32.op_Equality(ILGPU.Algorithms.Random.XorShift32,ILGPU.Algorithms.Random.XorShift32)">
            <summary>
            Returns true iff the first and second rng are the same.
            </summary>
            <param name="first">The first rng.</param>
            <param name="second">The second rng.</param>
            <returns>True, iff the first and second rng are the same.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift32.op_Inequality(ILGPU.Algorithms.Random.XorShift32,ILGPU.Algorithms.Random.XorShift32)">
            <summary>
            Returns true iff the first and second rng are not the same.
            </summary>
            <param name="first">The first rng.</param>
            <param name="second">The second rng.</param>
            <returns>True, iff the first and second rng are not the same.</returns>
        </member>
        <member name="T:ILGPU.Algorithms.Random.XorShift64Star">
            <summary>
            Implements a simple and fast xor-shift rng.
            </summary>
            <remarks>https://en.wikipedia.org/wiki/Xorshift</remarks>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift64Star.Create(System.Random)">
            <summary>
            Creates a new rng instance with the help of a CPU-based rng.
            </summary>
            <param name="random">The desired rng.</param>
            <returns>A new rng instance.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift64Star.#ctor(System.UInt64)">
            <summary>
            Constructs a new rng instance.
            </summary>
            <param name="state">The initial state value.</param>
        </member>
        <member name="P:ILGPU.Algorithms.Random.XorShift64Star.State">
            <summary>
            The internal state value.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift64Star.Next">
            <summary>
            Generates a random uint in [0..ulong.MaxValue].
            </summary>
            <returns>A random uint in [0..ulong.MaxValue].</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift64Star.NextDouble">
            <summary>
            Generates a random double in [0..1].
            </summary>
            <returns>A random double in [0..1].</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift64Star.NextFloat">
            <summary>
            Generates a random float in [0..1].
            </summary>
            <returns>A random float in [0..1].</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift64Star.NextLong">
            <summary>
            Generates a random int in [0..long.MaxValue].
            </summary>
            <returns>A random int in [0..long.MaxValue].</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift64Star.Next(System.Int64,System.Int64)">
            <summary>
            Generates a random int in [minValue..maxValue[.
            </summary>
            <param name="minValue">The minimum value (inclusive)</param>
            <param name="maxValue">The maximum values (exclusive)</param>
            <returns>A random int in [minValue..maxValue[.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift64Star.Equals(ILGPU.Algorithms.Random.XorShift64Star)">
            <summary>
            Returns true iff the given object is equal to the current rng.
            </summary>
            <param name="other">The other rng to test.</param>
            <returns>True, iff the given object is equal to the current rng.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift64Star.GetHashCode">
            <summary>
            Returns the hash code of this rng.
            </summary>
            <returns>The hash code of this rng.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift64Star.Equals(System.Object)">
            <summary>
            Returns true iff the given object is equal to the current rng.
            </summary>
            <param name="obj">The other rng to test.</param>
            <returns>True, iff the given object is equal to the current rng.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift64Star.ToString">
            <summary>
            Returns the string representation of this rng.
            </summary>
            <returns>The string representation of this rng.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift64Star.op_Equality(ILGPU.Algorithms.Random.XorShift64Star,ILGPU.Algorithms.Random.XorShift64Star)">
            <summary>
            Returns true iff the first and second rng are the same.
            </summary>
            <param name="first">The first rng.</param>
            <param name="second">The second rng.</param>
            <returns>True, iff the first and second rng are the same.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift64Star.op_Inequality(ILGPU.Algorithms.Random.XorShift64Star,ILGPU.Algorithms.Random.XorShift64Star)">
            <summary>
            Returns true iff the first and second rng are not the same.
            </summary>
            <param name="first">The first rng.</param>
            <param name="second">The second rng.</param>
            <returns>True, iff the first and second rng are not the same.</returns>
        </member>
        <member name="T:ILGPU.Algorithms.Reduction`1">
            <summary>
            Represents a reduction using a reduction logic.
            </summary>
            <typeparam name="T">The underlying type of the reduction.</typeparam>
            <param name="stream">The accelerator stream.</param>
            <param name="input">The input elements to reduce.</param>
            <param name="output">The output view to store the reduced value.</param>
        </member>
        <member name="T:ILGPU.Algorithms.ReductionExtensions">
            <summary>
            Reduction functionality for accelerators.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ReductionExtensions.ComputeReductionGroupSize(ILGPU.Runtime.Accelerator)">
            <summary>
            Computes a group size for reduction-kernel dispatch.
            </summary>
            <param name="accelerator">The accelerator.</param>
            <returns>
            The grouped reduction dimension for reduction-kernel dispatch.
            </returns>
        </member>
        <member name="M:ILGPU.Algorithms.ReductionExtensions.ComputeReductionDimension(ILGPU.Runtime.Accelerator,ILGPU.Index1)">
            <summary>
            Computes a grouped reduction dimension for reduction-kernel dispatch.
            </summary>
            <param name="accelerator">The accelerator.</param>
            <param name="dataLength">The number of data elements to reduce.</param>
            <returns>
            The grouped reduction dimension for reduction-kernel dispatch.
            </returns>
        </member>
        <member name="M:ILGPU.Algorithms.ReductionExtensions.ReductionKernel``2(ILGPU.ArrayView{``0},ILGPU.ArrayView{``0})">
            <summary>
            The actual reduction implementation.
            </summary>
            <typeparam name="T">The underlying type of the reduction.</typeparam>
            <typeparam name="TReduction">The type of the reduction logic.</typeparam>
            <param name="input">The input view.</param>
            <param name="output">The output view.</param>
        </member>
        <member name="M:ILGPU.Algorithms.ReductionExtensions.CreateReduction``2(ILGPU.Runtime.Accelerator)">
            <summary>
            Creates a new instance of a reduction handler.
            </summary>
            <typeparam name="T">The underlying type of the reduction.</typeparam>
            <typeparam name="TReduction">The type of the reduction logic.</typeparam>
            <param name="accelerator">The accelerator.</param>
            <returns>The created reduction handler.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ReductionExtensions.Reduce``2(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{``0},ILGPU.ArrayView{``0})">
            <summary>
            Performs a reduction using a reduction logic.
            </summary>
            <typeparam name="T">The underlying type of the reduction.</typeparam>
            <typeparam name="TReduction">The type of the reduction logic.</typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="input">The input elements to reduce.</param>
            <param name="output">The output view to store the reduced value.</param>
        </member>
        <member name="M:ILGPU.Algorithms.ReductionExtensions.Reduce``2(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{``0})">
            <summary>
            Performs a reduction using a reduction logic.
            </summary>
            <typeparam name="T">The underlying type of the reduction.</typeparam>
            <typeparam name="TReduction">The type of the reduction logic.</typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="input">The input elements to reduce.</param>
            <remarks>
            Uses the internal cache to realize a temporary output buffer.
            </remarks>
            <returns>The reduced value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ReductionExtensions.ReduceAsync``2(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{``0})">
            <summary>
            Performs a reduction using a reduction logic.
            </summary>
            <typeparam name="T">The underlying type of the reduction.</typeparam>
            <typeparam name="TReduction">The type of the reduction logic.</typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="input">The input elements to reduce.</param>
            <remarks>
            Uses the internal cache to realize a temporary output buffer.
            </remarks>
            <returns>The reduced value.</returns>
        </member>
        <member name="T:ILGPU.Algorithms.ReorderTransformer`3">
            <summary>
            Reorders and transforms elements in the source view by storing the reordered
            elements in the target view. The values are reordered according to:
            target(idx) = transform(source(reorderView(idx))).
            </summary>
            <typeparam name="TSource">
            The source type of the elements to reorder and transform.
            </typeparam>
            <typeparam name="TTarget">
            The target type of the elements that have been transformed.
            </typeparam>
            <typeparam name="TTransformer">
            The transformer to transform elements from the source type to the target type.
            </typeparam>
            <param name="stream">The accelerator stream.</param>
            <param name="source">The source elements to transform</param>
            <param name="target">
            The target elements that will contain the transformed values.
            </param>
            <param name="reorderView">
            The view of indices such that target(idx) = transform(source(reorderView(idx))).
            </param>
            <param name="transformer">The used transformer.</param>
        </member>
        <member name="T:ILGPU.Algorithms.ReorderExtensions">
            <summary>
            Reorder functionality for accelerators.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.ReorderExtensions.ReorderTransformWrapper`3">
            <summary>
            Represents a transformer that is used for reordering and transforming
            elements of type <typeparamref name="TSource"/> to elements of type
            <typeparamref name="TTarget"/> using a transformer of type
            <typeparamref name="TTransformer"/>.
            </summary>
            <typeparam name="TSource">
            The source type of the elements to transform.
            </typeparam>
            <typeparam name="TTarget">
            The target type of the elements that have been transformed.
            </typeparam>
            <typeparam name="TTransformer">
            The transformer to transform elements from the source type to the target type.
            </typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.ReorderExtensions.ReorderTransformWrapper`3.#ctor(ILGPU.ArrayView{`0},`2@)">
            <summary>
            Constructs a new reorder transformer.
            </summary>
            <param name="view">The source elements.</param>
            <param name="transformer">The used transformer.</param>
        </member>
        <member name="P:ILGPU.Algorithms.ReorderExtensions.ReorderTransformWrapper`3.SourceView">
            <summary>
            Returns the source view.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ReorderExtensions.ReorderTransformWrapper`3.Transformer">
            <summary>
            Returns the underlying transformer.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ReorderExtensions.ReorderTransformWrapper`3.Transform(ILGPU.Index1)">
            <summary cref="M:ILGPU.Algorithms.ITransformer`2.Transform(`0)"/>
        </member>
        <member name="M:ILGPU.Algorithms.ReorderExtensions.CreateReorderTransformer``3(ILGPU.Runtime.Accelerator)">
            <summary>
            Creates a reorder transformer that is defined by the given source and target
            type and the specified transformer type.
            </summary>
            <typeparam name="TSource">
            The source value type of the transformation.
            </typeparam>
            <typeparam name="TTarget">
            The target value type of the transformation.
            </typeparam>
            <typeparam name="TTransformer">
            The transformer to transform elements from the source type to the target type.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <returns>The loaded transformer.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ReorderExtensions.Reorder``1(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{``0},ILGPU.ArrayView{``0},ILGPU.ArrayView{ILGPU.Index1})">
            <summary>
            Reorders elements in the source view by storing the reordered elements in the
            target view. The values are reordered according to:
            target(idx) = source(reorderView(idx)).
            </summary>
            <typeparam name="T">The type of the elements to reorder.</typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="source">The source elements to transform</param>
            <param name="target">
            The target elements that will contain the transformed values.
            </param>
            <param name="reorderView">
            The view of indices such that target(idx) = source(reorderView(idx)).
            </param>
        </member>
        <member name="M:ILGPU.Algorithms.ReorderExtensions.ReorderTransform``2(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{``0},ILGPU.ArrayView{``0},ILGPU.ArrayView{ILGPU.Index1},``1)">
            <summary>
            Reorders and transforms elements in the source view by storing the reordered
            elements in the target view. The values are reordered according to:
            target(idx) = transform(source(reorderView(idx))).
            </summary>
            <typeparam name="T">
            The type of the elements to reorder and transform.
            </typeparam>
            <typeparam name="TTransformer">
            The transformer to transform elements from the source type to the target type.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="source">The source elements to transform</param>
            <param name="target">
            The target elements that will contain the transformed values.
            </param>
            <param name="reorderView">
            The view of indices such that target(idx) =
            transform(source(reorderView(idx))).
            </param>
            <param name="transformer">The used transformer.</param>
        </member>
        <member name="M:ILGPU.Algorithms.ReorderExtensions.ReorderTransform``3(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{``0},ILGPU.ArrayView{``1},ILGPU.ArrayView{ILGPU.Index1},``2)">
            <summary>
            Reorders and transforms elements in the source view by storing the reordered
            elements in the target view. The values are reordered according to:
            target(idx) = transform(source(reorderView(idx))).
            </summary>
            <typeparam name="TSource">
            The source type of the elements to reorder and transform.
            </typeparam>
            <typeparam name="TTarget">
            The target type of the elements that have been transformed.
            </typeparam>
            <typeparam name="TTransformer">
            The transformer to transform elements from the source type to the target type.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="source">The source elements to transform</param>
            <param name="target">
            The target elements that will contain the transformed values.
            </param>
            <param name="reorderView">
            The view of indices such that target(idx) =
            transform(source(reorderView(idx))).
            </param>
            <param name="transformer">The used transformer.</param>
        </member>
        <member name="T:ILGPU.Algorithms.Resources.ErrorMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.Resources.ErrorMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.Resources.ErrorMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.Resources.ErrorMessages.NotSupportedArrayView64">
            <summary>
              Looks up a localized string similar to This function does not currently support ArrayViews of length &gt; int.MaxValue..
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.Resources.ErrorMessages.TempViewManagerUnalignedAllocation">
            <summary>
              Looks up a localized string similar to The allocation of type &apos;{0}&apos; is not correctly aligned. Requires &apos;{1}&apos; byte alignment but was allocated at byte offset &apos;{2}&apos;..
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.ScanKind">
            <summary>
            Represents the scan operation type.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.ScanKind.Inclusive">
            <summary>
            An inclusive scan operation.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.ScanKind.Exclusive">
            <summary>
            An exclusive scan operation.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.Scan`1">
            <summary>
            Represents a scan operation using a shuffle and operation logic.
            </summary>
            <typeparam name="T">The underlying type of the scan operation.</typeparam>
            <param name="stream">The accelerator stream.</param>
            <param name="input">The input elements to scan.</param>
            <param name="output">The output view to store the scanned values.</param>
            <param name="temp">The temp view to store temporary results.</param>
        </member>
        <member name="T:ILGPU.Algorithms.BufferedScan`1">
            <summary>
            Represents a scan operation using a shuffle and operation logic.
            </summary>
            <typeparam name="T">The underlying type of the scan operation.</typeparam>
            <param name="stream">The accelerator stream.</param>
            <param name="input">The input elements to scan.</param>
            <param name="output">The output view to store the scanned values.</param>
        </member>
        <member name="T:ILGPU.Algorithms.ScanProvider">
            <summary>
            Represents a scan provider for a scan operation.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="M:ILGPU.Algorithms.ScanProvider.AllocateTempScanView``1(ILGPU.ArrayView{``0})">
            <summary>
            Allocates a temporary memory view.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="input">The input view.</param>
            <returns>The allocated temporary view.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanProvider.CreateScan``2(ILGPU.Algorithms.ScanKind)">
            <summary>
            Creates a new buffered scan operation.
            </summary>
            <typeparam name="T">The underlying type of the scan operation.</typeparam>
            <typeparam name="TScanOperation">The type of the scan operation.</typeparam>
            <param name="kind">The scan kind.</param>
            <returns>The created scan handler.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanProvider.CreateInclusiveScan``2">
            <summary>
            Creates a new buffered inclusive scan operation.
            </summary>
            <typeparam name="T">The underlying type of the scan operation.</typeparam>
            <typeparam name="TScanOperation">The type of the scan operation.</typeparam>
            <returns>The created inclusive scan handler.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanProvider.CreateExclusiveScan``2">
            <summary>
            Creates a new buffered exclusive scan operation.
            </summary>
            <typeparam name="T">The underlying type of the scan operation.</typeparam>
            <typeparam name="TScanOperation">The type of the scan operation.</typeparam>
            <returns>The created exclusive scan handler.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanProvider.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Algorithms.ScanExtensions">
            <summary>
            Contains extension methods for scan operations.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ScanExtensions.ComputeScanTempStorageSize``1(ILGPU.Runtime.Accelerator,ILGPU.LongIndex1)">
            <summary>
            Computes the required number of temp-storage elements of type <typeparamref name="T"/>
            for a scan operation and the given data length.
            </summary>
            <param name="accelerator">The accelerator.</param>
            <param name="dataLength">The number of data elements to scan.</param>
            <returns>The required number of temp-storage elements in 32 bit ints.</returns>
        </member>
        <member name="T:ILGPU.Algorithms.ScanExtensions.IScanImplementation`2">
            <summary>
            An abstract scan implementation that implements required low-level scan functionality.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The scan operation.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.ScanExtensions.IScanImplementation`2.AllReduce(`0)">
            <summary>
            Performs an all-reduction for all threads in the current group.
            </summary>
            <param name="value">The value from the current thread.</param>
            <returns>The reduced value.</returns>
        </member>
        <member name="T:ILGPU.Algorithms.ScanExtensions.InclusiveScanImplementation`2">
            <summary>
            An inclusive-scan implementation.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The scan operation.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.ScanExtensions.InclusiveScanImplementation`2.Scan(`0)">
            <summary cref="M:ILGPU.Algorithms.GroupExtensions.IGroupScan`2.Scan(`0)"/>
        </member>
        <member name="M:ILGPU.Algorithms.ScanExtensions.InclusiveScanImplementation`2.Scan(`0,ILGPU.Algorithms.ScanReduceOperations.ScanBoundaries{`0}@)">
            <summary cref="M:ILGPU.Algorithms.GroupExtensions.IGroupScan`2.Scan(`0,ILGPU.Algorithms.ScanReduceOperations.ScanBoundaries{`0}@)"/>
        </member>
        <member name="M:ILGPU.Algorithms.ScanExtensions.InclusiveScanImplementation`2.AllReduce(`0)">
            <summary cref="M:ILGPU.Algorithms.ScanExtensions.IScanImplementation`2.AllReduce(`0)"/>
        </member>
        <member name="T:ILGPU.Algorithms.ScanExtensions.ExclusiveScanImplementation`2">
            <summary>
            An exclusive-scan implementation.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The scan operation.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.ScanExtensions.ExclusiveScanImplementation`2.Scan(`0)">
            <summary cref="M:ILGPU.Algorithms.GroupExtensions.IGroupScan`2.Scan(`0)"/>
        </member>
        <member name="M:ILGPU.Algorithms.ScanExtensions.ExclusiveScanImplementation`2.Scan(`0,ILGPU.Algorithms.ScanReduceOperations.ScanBoundaries{`0}@)">
            <summary cref="M:ILGPU.Algorithms.GroupExtensions.IGroupScan`2.Scan(`0,ILGPU.Algorithms.ScanReduceOperations.ScanBoundaries{`0}@)"/>
        </member>
        <member name="M:ILGPU.Algorithms.ScanExtensions.ExclusiveScanImplementation`2.AllReduce(`0)">
            <summary cref="M:ILGPU.Algorithms.ScanExtensions.IScanImplementation`2.AllReduce(`0)"/>
        </member>
        <member name="M:ILGPU.Algorithms.ScanExtensions.ComputeTileRightBoundary``3(ILGPU.Algorithms.TileInfo{``0},ILGPU.ArrayView{``0})">
            <summary>
            Computes the right tile boundary.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The scan-operation type.</typeparam>
            <typeparam name="TGroupScanImplementation">The group-scan implementation type.</typeparam>
            <param name="tileInfo">The current tile info.</param>
            <param name="input">The input view.</param>
            <returns>The resolved right boundary for all threads in the group.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanExtensions.ComputeTileScan``3(ILGPU.Algorithms.TileInfo{``0},ILGPU.ArrayView{``0},ILGPU.ArrayView{``0},``0)">
            <summary>
            Computes a single scan within a single tile.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The scan-operation type.</typeparam>
            <typeparam name="TGroupScanImplementation">The group-scan implementation type.</typeparam>
            <param name="tileInfo">The current tile info.</param>
            <param name="input">The input view.</param>
            <param name="output">The output view.</param>
            <param name="leftBoundary">The left boundary (e.g. of the previous tile).</param>
        </member>
        <member name="M:ILGPU.Algorithms.ScanExtensions.SingleGroupScanKernel``3(ILGPU.ArrayView{``0},ILGPU.ArrayView{``0})">
            <summary>
            Performs a scan operation within a single group only.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The scan operation.</typeparam>
            <typeparam name="TGroupScanImplementation">The actual group-scan implementation that provides the required group-level functionality.</typeparam>
            <param name="input">The input elements to scan.</param>
            <param name="output">The output view to store the scanned values.</param>
        </member>
        <member name="M:ILGPU.Algorithms.ScanExtensions.CreateSingleGroupScan``2(ILGPU.Runtime.Accelerator,ILGPU.Algorithms.ScanKind)">
            <summary>
            Creates a new single group scan.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The scan operation.</typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="kind">The scan kind.</param>
            <returns>The created scan operation.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanExtensions.SinglePassScanKernel``3(ILGPU.ArrayView{``0},ILGPU.ArrayView{``0},ILGPU.Algorithms.SequentialGroupExecutor,ILGPU.VariableView{``0},ILGPU.Index1)">
            <summary>
            Performs a scan operation with a single pass.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The scan operation.</typeparam>
            <typeparam name="TGroupScanImplementation">The actual group-scan implementation that provides the required group-level functionality.</typeparam>
            <param name="input">The input elements to scan.</param>
            <param name="output">The output view to store the scanned values.</param>
            <param name="sequentialGroupExecutor">The sequential group executor to use.</param>
            <param name="boundaryValue">The boundary value target in global memory to share intermediate results.</param>
            <param name="numIterationsPerGroup">The number of iterations per group.</param>
        </member>
        <member name="M:ILGPU.Algorithms.ScanExtensions.ComputeNumIntElementsForSinglePassScan``1">
            <summary>
            Computes the required number of elements of size <see cref="T:System.Int32"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <returns>The required number of <see cref="T:System.Int32"/> elements in temporary memory.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanExtensions.CreateSinglePassScan``2(ILGPU.Runtime.Accelerator,ILGPU.Algorithms.ScanKind)">
            <summary>
            Creates a new single pass scan.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The scan operation.</typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="kind">The scan kind.</param>
            <returns>The created scan operation.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanExtensions.MultiPassScanKernel1``3(ILGPU.ArrayView{``0},ILGPU.ArrayView{``0},ILGPU.Index1)">
            <summary>
            Performs the first pass in the scope of a multi-pass scan.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The scan operation.</typeparam>
            <typeparam name="TGroupScanImplementation">The actual group-scan implementation that provides the required group-level functionality.</typeparam>
            <param name="input">The input elements to scan.</param>
            <param name="rightBoundaries">The right boundaries to store.</param>
            <param name="numIterationsPerGroup">The number of iterations per group.</param>
        </member>
        <member name="M:ILGPU.Algorithms.ScanExtensions.MultiPassScanKernel2``3(ILGPU.ArrayView{``0},ILGPU.ArrayView{``0},ILGPU.ArrayView{``0},ILGPU.Index1)">
            <summary>
            Performs the second pass in the scope of a multi-pass scan.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The scan operation.</typeparam>
            <typeparam name="TGroupScanImplementation">The actual group-scan implementation that provides the required group-level functionality.</typeparam>
            <param name="input">The input elements to scan.</param>
            <param name="rightBoundaries">The right boundaries to use.</param>
            <param name="output">The scanned values.</param>
            <param name="numIterationsPerGroup">The number of iterations per group.</param>
        </member>
        <member name="M:ILGPU.Algorithms.ScanExtensions.CreateMultiPassScan``2(ILGPU.Runtime.Accelerator,ILGPU.Algorithms.ScanKind)">
            <summary>
            Creates a new multi pass scan.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The scan operation.</typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="kind">The scan kind.</param>
            <returns>The created scan operation.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanExtensions.CreateScan``2(ILGPU.Runtime.Accelerator,ILGPU.Algorithms.ScanKind)">
            <summary>
            Creates a new scan operation.
            </summary>
            <typeparam name="T">The underlying type of the scan operation.</typeparam>
            <typeparam name="TScanOperation">The type of the scan operation.</typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="kind">The scan kind.</param>
            <returns>The created scan handler.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanExtensions.CreateInclusiveScan``2(ILGPU.Runtime.Accelerator)">
            <summary>
            Creates a new inclusive scan operation.
            </summary>
            <typeparam name="T">The underlying type of the scan operation.</typeparam>
            <typeparam name="TScanOperation">The type of the scan operation.</typeparam>
            <param name="accelerator">The accelerator.</param>
            <returns>The created inclusive scan handler.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanExtensions.CreateExclusiveScan``2(ILGPU.Runtime.Accelerator)">
            <summary>
            Creates a new exclusive scan operation.
            </summary>
            <typeparam name="T">The underlying type of the scan operation.</typeparam>
            <typeparam name="TScanOperation">The type of the scan operation.</typeparam>
            <param name="accelerator">The accelerator.</param>
            <returns>The created exclusive scan handler.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanExtensions.CreateScanProvider(ILGPU.Runtime.Accelerator)">
            <summary>
            Creates a new specialized scan provider that has its own cache.
            Note that the resulting provider has to be disposed manually.
            </summary>
            <param name="accelerator">The accelerator.</param>
            <returns>The created provider.</returns>
        </member>
        <member name="T:ILGPU.Algorithms.Sequencer`2">
            <summary>
            Computes a new sequence of values from 0 to view.Length - 1 and writes
            the computed values to the given view.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TSequencer">The type of the sequencer to use.</typeparam>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The target view.</param>
            <param name="sequencer">The used sequencer.</param>
        </member>
        <member name="T:ILGPU.Algorithms.BatchedSequencer`2">
            <summary>
            Computes a new sequence of batched values of length sequenceBatchLength, and
            writes the computed values to the given view. Afterwards, the target view will
            contain the following values:
            - [0, sequenceBatchLength - 1] = 0,,
            - [sequenceBatchLength, sequenceBatchLength * 2 -1] = 1,
            - ...
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TSequencer">The type of the sequencer to use.</typeparam>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The target view.</param>
            <param name="sequenceBatchLength">The length of a single batch.</param>
            <param name="sequencer">The used sequencer.</param>
        </member>
        <member name="T:ILGPU.Algorithms.RepeatedSequencer`2">
            <summary>
            Computes a new repeated sequence of values from 0 to sequenceLength, from 0 to
            sequenceLength, ... and writes the computed values to the given view. Afterwards,
            the target view will contain the following values:
            - [0, sequenceLength - 1] = [0, sequenceLength]
            - [sequenceLength, sequenceLength * 2 -1] = [0, sequenceLength]
            - ...
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TSequencer">The type of the sequencer to use.</typeparam>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The target view.</param>
            <param name="sequenceLength">The length of a single sequence.</param>
            <param name="sequencer">The used sequencer.</param>
        </member>
        <member name="T:ILGPU.Algorithms.RepeatedBatchedSequencer`2">
            <summary>
            Computes a new repeated sequence (of length sequenceLength) of batched values (of
            length sequenceBatchLength), and writes the computed values to the given view.
            Afterwards, the target view will contain the following values:
            - [0, sequenceLength - 1] =
                  - [0, sequenceBatchLength - 1] = sequencer(0),
                  - [sequenceBatchLength, sequenceBatchLength * 2 - 1] = sequencer(1),
                  - ...
            - [sequenceLength, sequenceLength * 2 - 1]
                  - [sequenceLength, sequenceLength + sequenceBatchLength - 1] = sequencer(0),
                  - [sequenceLength + sequenceBatchLength,
                     sequenceLength + sequenceBatchLength * 2 - 1] = sequencer(1),
                  - ...
            - ...
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TSequencer">The type of the sequencer to use.</typeparam>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The target view.</param>
            <param name="sequenceLength">The length of a single sequence.</param>
            <param name="sequenceBatchLength">The length of a single batch.</param>
            <param name="sequencer">The used sequencer.</param>
        </member>
        <member name="T:ILGPU.Algorithms.SequenceExtensions">
            <summary>
            Sequencer functionality for accelerators.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.SequenceExtensions.SequenceKernel``2(ILGPU.Index1,ILGPU.ArrayView{``0},ILGPU.Index1,ILGPU.Index1,``1)">
            <summary>
            The actual raw sequencer implementation.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TSequencer">The type of the sequencer to use.</typeparam>
            <param name="index">The current thread index.</param>
            <param name="view">The target view.</param>
            <param name="sequenceLength">The length of the sequence.</param>
            <param name="sequenceBatchLength">
            The length of a single batch within a sequence.
            </param>
            <param name="sequencer">The sequencer instance.</param>
        </member>
        <member name="M:ILGPU.Algorithms.SequenceExtensions.CreateRawSequencer``2(ILGPU.Runtime.Accelerator,ILGPU.Index1@)">
            <summary>
            Creates a raw sequencer that is defined by the given element type and the type
            of the sequencer.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TSequencer">The type of the sequencer to use.</typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="minDataSize">The minimum data size for maximum occupancy.</param>
            <returns>The loaded sequencer.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.SequenceExtensions.CreateSequencer``2(ILGPU.Runtime.Accelerator)">
            <summary>
            Creates a sequencer that is defined by the given element type and the type of
            the sequencer.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TSequencer">The type of the sequencer to use.</typeparam>
            <param name="accelerator">The accelerator.</param>
            <returns>The loaded sequencer.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.SequenceExtensions.CreateBatchedSequencer``2(ILGPU.Runtime.Accelerator)">
            <summary>
            Creates a batched sequencer that is defined by the given element type and the
            type of the sequencer.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TSequencer">The type of the sequencer to use.</typeparam>
            <param name="accelerator">The accelerator.</param>
            <returns>The loaded sequencer.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.SequenceExtensions.CreateRepeatedSequencer``2(ILGPU.Runtime.Accelerator)">
            <summary>
            Creates a repeated sequencer that is defined by the given element type and the
            type of the sequencer.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TSequencer">The type of the sequencer to use.</typeparam>
            <param name="accelerator">The accelerator.</param>
            <returns>The loaded sequencer.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.SequenceExtensions.CreateRepeatedBatchedSequencer``2(ILGPU.Runtime.Accelerator)">
            <summary>
            Creates a repeated batched sequencer that is defined by the given element type
            and the type of the sequencer.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TSequencer">The type of the sequencer to use.</typeparam>
            <param name="accelerator">The accelerator.</param>
            <returns>The loaded sequencer.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.SequenceExtensions.Sequence``2(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{``0},``1)">
            <summary>
            Computes a new sequence of values from 0 to view.Length - 1 and writes
            the computed values to the given view.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TSequencer">The type of the sequencer to use.</typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The target view.</param>
            <param name="sequencer">The used sequencer.</param>
        </member>
        <member name="M:ILGPU.Algorithms.SequenceExtensions.RepeatedSequence``2(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{``0},ILGPU.Index1,``1)">
            <summary>
            Computes a new repeated sequence of values from 0 to sequenceLength, from 0 to
            sequenceLength, ... and writes the computed values to the given view.
            Afterwards, the target view will contain the following values:
            - [0, sequenceLength - 1] = [0, sequenceLength]
            - [sequenceLength, sequenceLength * 2 -1] = [0, sequenceLength]
            - ...
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TSequencer">The type of the sequencer to use.</typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The target view.</param>
            <param name="sequenceLength">The length of a single sequence.</param>
            <param name="sequencer">The used sequencer.</param>
        </member>
        <member name="M:ILGPU.Algorithms.SequenceExtensions.BatchedSequence``2(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{``0},ILGPU.Index1,``1)">
            <summary>
            Computes a new sequence of batched values of length sequenceBatchLength, and
            writes the computed values to the given view. Afterwards, the target view will
            contain the following values:
            - [0, sequenceBatchLength - 1] = 0,,
            - [sequenceBatchLength, sequenceBatchLength * 2 -1] = 1,
            - ...
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TSequencer">The type of the sequencer to use.</typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The target view.</param>
            <param name="sequenceBatchLength">The length of a single batch.</param>
            <param name="sequencer">The used sequencer.</param>
        </member>
        <member name="M:ILGPU.Algorithms.SequenceExtensions.RepeatedBatchedSequence``2(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{``0},ILGPU.Index1,ILGPU.Index1,``1)">
            <summary>
            Computes a new repeated sequence (of length sequenceLength) of batched values
            (of length sequenceBatchLength), and writes the computed values to the given
            view. Afterwards, the target view will contain the following values:
            - [0, sequenceLength - 1] = 
                  - [0, sequenceBatchLength - 1] = sequencer(0),
                  - [sequenceBatchLength, sequenceBatchLength * 2 - 1] = sequencer(1),
                  - ...
            - [sequenceLength, sequenceLength * 2 - 1]
                  - [sequenceLength,
                     sequenceLength + sequenceBatchLength - 1] = sequencer(0),
                  - [sequenceLength + sequenceBatchLength,
                     sequenceLength + sequenceBatchLength * 2 - 1] = sequencer(1),
                  - ...
            - ...
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TSequencer">The type of the sequencer to use.</typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The target view.</param>
            <param name="sequenceLength">The length of a single sequence.</param>
            <param name="sequenceBatchLength">The length of a single batch.</param>
            <param name="sequencer">The used sequencer.</param>
        </member>
        <member name="T:ILGPU.Algorithms.Sequencers.ISequencer`1">
            <summary>
            Represents an abstract interface for a sequencer.
            </summary>
            <typeparam name="T">The sequence element type.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.Sequencers.ISequencer`1.ComputeSequenceElement(ILGPU.Index1)">
            <summary>
            Computes the sequence element for the corresponding
            <paramref name="sequenceIndex"/>.
            </summary>
            <param name="sequenceIndex">
            The sequence index for the computation of the corresponding value.
            </param>
            <returns>The computed sequence value.</returns>
        </member>
        <member name="T:ILGPU.Algorithms.Sequencers.IndexSequencer">
            <summary>
            Represents an identity implementation of an index sequencer.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.Sequencers.IndexSequencer.ComputeSequenceElement(ILGPU.Index1)">
            <summary cref="M:ILGPU.Algorithms.Sequencers.ISequencer`1.ComputeSequenceElement(ILGPU.Index1)" />
        </member>
        <member name="T:ILGPU.Algorithms.Sequencers.HalfSequencer">
            <summary>
            Represents an identity implementation of a half sequencer.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.Sequencers.HalfSequencer.ComputeSequenceElement(ILGPU.Index1)">
            <summary cref="M:ILGPU.Algorithms.Sequencers.ISequencer`1.ComputeSequenceElement(ILGPU.Index1)" />
        </member>
        <member name="T:ILGPU.Algorithms.Sequencers.FloatSequencer">
            <summary>
            Represents an identity implementation of a float sequencer.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.Sequencers.FloatSequencer.ComputeSequenceElement(ILGPU.Index1)">
            <summary cref="M:ILGPU.Algorithms.Sequencers.ISequencer`1.ComputeSequenceElement(ILGPU.Index1)" />
        </member>
        <member name="T:ILGPU.Algorithms.Sequencers.DoubleSequencer">
            <summary>
            Represents an identity implementation of a double sequencer.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.Sequencers.DoubleSequencer.ComputeSequenceElement(ILGPU.Index1)">
            <summary cref="M:ILGPU.Algorithms.Sequencers.ISequencer`1.ComputeSequenceElement(ILGPU.Index1)" />
        </member>
        <member name="T:ILGPU.Algorithms.Sequencers.Int8Sequencer">
            <summary>
            Represents an identity implementation of a sequencer.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.Sequencers.Int8Sequencer.ComputeSequenceElement(ILGPU.Index1)">
            <summary cref="M:ILGPU.Algorithms.Sequencers.ISequencer`1.ComputeSequenceElement(ILGPU.Index1)" />
        </member>
        <member name="T:ILGPU.Algorithms.Sequencers.Int16Sequencer">
            <summary>
            Represents an identity implementation of a sequencer.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.Sequencers.Int16Sequencer.ComputeSequenceElement(ILGPU.Index1)">
            <summary cref="M:ILGPU.Algorithms.Sequencers.ISequencer`1.ComputeSequenceElement(ILGPU.Index1)" />
        </member>
        <member name="T:ILGPU.Algorithms.Sequencers.Int32Sequencer">
            <summary>
            Represents an identity implementation of a sequencer.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.Sequencers.Int32Sequencer.ComputeSequenceElement(ILGPU.Index1)">
            <summary cref="M:ILGPU.Algorithms.Sequencers.ISequencer`1.ComputeSequenceElement(ILGPU.Index1)" />
        </member>
        <member name="T:ILGPU.Algorithms.Sequencers.Int64Sequencer">
            <summary>
            Represents an identity implementation of a sequencer.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.Sequencers.Int64Sequencer.ComputeSequenceElement(ILGPU.Index1)">
            <summary cref="M:ILGPU.Algorithms.Sequencers.ISequencer`1.ComputeSequenceElement(ILGPU.Index1)" />
        </member>
        <member name="T:ILGPU.Algorithms.Sequencers.UInt8Sequencer">
            <summary>
            Represents an identity implementation of a sequencer.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.Sequencers.UInt8Sequencer.ComputeSequenceElement(ILGPU.Index1)">
            <summary cref="M:ILGPU.Algorithms.Sequencers.ISequencer`1.ComputeSequenceElement(ILGPU.Index1)" />
        </member>
        <member name="T:ILGPU.Algorithms.Sequencers.UInt16Sequencer">
            <summary>
            Represents an identity implementation of a sequencer.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.Sequencers.UInt16Sequencer.ComputeSequenceElement(ILGPU.Index1)">
            <summary cref="M:ILGPU.Algorithms.Sequencers.ISequencer`1.ComputeSequenceElement(ILGPU.Index1)" />
        </member>
        <member name="T:ILGPU.Algorithms.Sequencers.UInt32Sequencer">
            <summary>
            Represents an identity implementation of a sequencer.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.Sequencers.UInt32Sequencer.ComputeSequenceElement(ILGPU.Index1)">
            <summary cref="M:ILGPU.Algorithms.Sequencers.ISequencer`1.ComputeSequenceElement(ILGPU.Index1)" />
        </member>
        <member name="T:ILGPU.Algorithms.Sequencers.UInt64Sequencer">
            <summary>
            Represents an identity implementation of a sequencer.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.Sequencers.UInt64Sequencer.ComputeSequenceElement(ILGPU.Index1)">
            <summary cref="M:ILGPU.Algorithms.Sequencers.ISequencer`1.ComputeSequenceElement(ILGPU.Index1)" />
        </member>
        <member name="T:ILGPU.Algorithms.SequentialGroupExecutor">
            <summary>
            Realizes a seqential group-execution pattern via a device-wide barrier.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.SequentialGroupExecutor.#ctor(ILGPU.VariableView{System.Int32})">
            <summary>
            Constructs a new sequential group executor.
            </summary>
            <param name="fieldAddress">
            The target field address in global memory to use.
            </param>
        </member>
        <member name="M:ILGPU.Algorithms.SequentialGroupExecutor.Reset">
            <summary>
            Resets the internal state.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.SequentialGroupExecutor.Wait">
            <summary>
            Waits for all previous groups to finish.
            </summary>
            <remarks>
            Caution: ensure that the internal state is reset before calling the
            <see cref="M:ILGPU.Algorithms.SequentialGroupExecutor.Wait"/> method.
            </remarks>
        </member>
        <member name="M:ILGPU.Algorithms.SequentialGroupExecutor.Release">
            <summary>
            Signals the next group to continue processing.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.SequentialGroupExecutor`1">
            <summary>
            Realizes a sequential group-execution pattern via a device-wide barrier
            that can pass an element of type <typeparamref name="T"/> to another group.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.SequentialGroupExecutor`1.#ctor(ILGPU.VariableView{System.Int32},ILGPU.VariableView{`0})">
            <summary>
            Constructs a new sequential group executor.
            </summary>
            <param name="executorView">
            The target field address in global memory to use.
            </param>
            <param name="dataView">
            The target data address in global memory to use.
            </param>
        </member>
        <member name="M:ILGPU.Algorithms.SequentialGroupExecutor`1.Reset">
            <summary>
            Resets the internal state.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.SequentialGroupExecutor`1.Wait">
            <summary>
            Waits for all previous groups to finish.
            </summary>
            <returns>The value from the previous group.</returns>
            <remarks>
            Caution: ensure that the internal state is reset before calling the
            <see cref="M:ILGPU.Algorithms.SequentialGroupExecutor`1.Wait"/> method.
            </remarks>
        </member>
        <member name="M:ILGPU.Algorithms.SequentialGroupExecutor`1.Release(`0)">
            <summary>
            Signals the next group to continue processing.
            </summary>
            <param name="value">The value that should be passed to the next group.</param>
        </member>
        <member name="T:ILGPU.Algorithms.TempViewManager">
            <summary>
            Simplifies the subsequent splitting of a temporary memory view
            into smaller chunks.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.TempViewManager.#ctor(ILGPU.ArrayView{System.Int32},System.String)">
            <summary>
            Constructs a new temp-view manager.
            </summary>
            <param name="tempView">The source temp view to use.</param>
            <param name="paramName">
            The associated parameter name (for error messages).
            </param>
        </member>
        <member name="P:ILGPU.Algorithms.TempViewManager.NumInts">
            <summary>
            Returns the total number of ints (32bit integers) that
            have been allocated.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.TempViewManager.ParamName">
            <summary>
            Returns the associated param name (for error messages).
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.TempViewManager.TempView">
            <summary>
            Returns the underlying temporary array view.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.TempViewManager.Allocate``1">
            <summary>
            Allocates a single element of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The element type to allocate.</typeparam>
            <returns>The allocated variable view.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.TempViewManager.Allocate``1(System.Int64)">
            <summary>
            Allocates several elements of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The element type to allocate.</typeparam>
            <param name="length">The number of elements to allocate.</param>
            <returns>The allocated array view.</returns>
        </member>
        <member name="T:ILGPU.Algorithms.TileInfo`1">
            <summary>
            Contains information about a single scan tile.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.TileInfo`1.#ctor(ILGPU.ArrayView{`0},ILGPU.Index1)">
            <summary>
            Constructs a new tile information instance.
            </summary>
            <param name="input">The input view.</param>
            <param name="numIterationsPerGroup">
            The number of iterations per group to compute the tile size.
            </param>
        </member>
        <member name="P:ILGPU.Algorithms.TileInfo`1.TileSize">
            <summary>
            Returns the tile size.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.TileInfo`1.StartIndex">
            <summary>
            Returns the start index of the current thread (inclusive).
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.TileInfo`1.EndIndex">
            <summary>
            Returns the end index of all threads in the group (exclusive).
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.TileInfo`1.MaxLength">
            <summary>
            Returns the maximum data length to avoid out-of-bounds accesses.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.ITransformer`2">
            <summary>
            Represents an abstract interface for a value transformer.
            </summary>
            <typeparam name="TSource">The source value type of the transformation.</typeparam>
            <typeparam name="TTarget">The target value type of the transformation.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.ITransformer`2.Transform(`0)">
            <summary>
            Transforms the given value of type <typeparamref name="TSource"/>
            into a transformed value of type <typeparamref name="TTarget"/>.
            </summary>
            <param name="value">The value to transform.</param>
            <returns>
            The transformed value of type <typeparamref name="TTarget"/>.
            </returns>
        </member>
        <member name="T:ILGPU.Algorithms.IdentityTransformer`1">
            <summary>
            Represents a generic identity transformer.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.IdentityTransformer`1.Transform(`0)">
            <summary>
            Performs an identity transformation by returning the input value.
            </summary>
            <param name="value">The value to transform.</param>
            <returns>The unchanged input value.</returns>
        </member>
        <member name="T:ILGPU.Algorithms.TransformImpl`3">
            <summary>
            </summary>
            <typeparam name="TSource">The source value type of the transformation.</typeparam>
            <typeparam name="TTarget">The target value type of the transformation.</typeparam>
            <typeparam name="TTransformer">
            The transformer to transform elements from the source type to the target type.
            </typeparam>
        </member>
        <member name="F:ILGPU.Algorithms.TransformImpl`3.KernelMethod">
            <summary>
            Represents a transform kernel.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.Transformer`3">
            <summary>
            Represents an element transformer that Transforms elements in the source view into
            elements in the target view using the given transformer.
            </summary>
            <typeparam name="TSource">The source value type of the transformation.</typeparam>
            <typeparam name="TTarget">The target value type of the transformation.</typeparam>
            <typeparam name="TTransformer">
            The transformer to transform elements from the source type to the target type.
            </typeparam>
            <param name="stream">The accelerator stream.</param>
            <param name="source">The source elements to transform</param>
            <param name="target">
            The target elements that will contain the transformed values.
            </param>
            <param name="transformer">The used transformer.</param>
        </member>
        <member name="T:ILGPU.Algorithms.TransformExtensions">
            <summary>
            Transformer functionality for accelerators.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.TransformExtensions.TransformKernel``3(ILGPU.Index1,ILGPU.ArrayView{``0},ILGPU.ArrayView{``1},``2)">
            <summary>
            Implements a transformer algorithm.
            </summary>
            <typeparam name="TSource">
            The source value type of the transformation.
            </typeparam>
            <typeparam name="TTarget">
            The target value type of the transformation.
            </typeparam>
            <typeparam name="TTransformer">
            The transformer to transform elements from the source type to the target type.
            </typeparam>
            <param name="index"></param>
            <param name="source"></param>
            <param name="target"></param>
            <param name="transformer"></param>
        </member>
        <member name="M:ILGPU.Algorithms.TransformExtensions.CreateRawTransformer``3(ILGPU.Runtime.Accelerator,ILGPU.Index1@)">
            <summary>
            Creates a raw transformer that is defined by the given source and target type
            and the specified transformer type.
            </summary>
            <typeparam name="TSource">
            The source value type of the transformation.
            </typeparam>
            <typeparam name="TTarget">
            The target value type of the transformation.
            </typeparam>
            <typeparam name="TTransformer">
            The transformer to transform elements from the source type to the target type.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="minDataSize">The minimum data size for maximum occupancy.</param>
            <returns>The loaded transformer.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.TransformExtensions.CreateTransformer``3(ILGPU.Runtime.Accelerator)">
            <summary>
            Creates a raw transformer that is defined by the given source and target type
            and the specified transformer type.
            </summary>
            <typeparam name="TSource">
            The source value type of the transformation.
            </typeparam>
            <typeparam name="TTarget">
            The target value type of the transformation.
            </typeparam>
            <typeparam name="TTransformer">
            The transformer to transform elements from the source type to the target type.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <returns>The loaded transformer.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.TransformExtensions.CreateTransformer``2(ILGPU.Runtime.Accelerator)">
            <summary>
            Creates a new transformer that is defined by the element type and the
            specified transformer type.
            </summary>
            <typeparam name="T">The type of the elements to transform.</typeparam>
            <typeparam name="TTransformer">
            The transformer to transform elements from the source type to the target type.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <returns>The loaded transformer.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.TransformExtensions.Transform``2(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{``0},ILGPU.ArrayView{``0},``1)">
            <summary>
            Transforms elements in the source view into elements in the target view using
            the given transformer.
            </summary>
            <typeparam name="T">The type of the elements to transform.</typeparam>
            <typeparam name="TTransformer">
            The transformer to transform elements from the source type to the target type.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="source">The source elements to transform</param>
            <param name="target">
            The target elements that will contain the transformed values.
            </param>
            <param name="transformer">The used transformer.</param>
        </member>
        <member name="M:ILGPU.Algorithms.TransformExtensions.Transform``3(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{``0},ILGPU.ArrayView{``1},``2)">
            <summary>
            Transforms elements in the source view into elements in the target view using
            the given transformer.
            </summary>
            <typeparam name="TSource">
            The source type of the elements to transform.
            </typeparam>
            <typeparam name="TTarget">
            The target type of the elements that have been transformed.
            </typeparam>
            <typeparam name="TTransformer">
            The transformer to transform elements from the source type to the target type.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="source">The source elements to transform</param>
            <param name="target">
            The target elements that will contain the transformed values.
            </param>
            <param name="transformer">The used transformer.</param>
        </member>
        <member name="T:ILGPU.Algorithms.VectorExtensions">
            <summary>
            Represents extension methods for vectors.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.VectorExtensions.Vector2XOffset">
            <summary>
            Represents the offset of the x-component of a <see cref="T:System.Numerics.Vector2"/>.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.VectorExtensions.Vector2YOffset">
            <summary>
            Represents the offset of the y-component of a <see cref="T:System.Numerics.Vector2"/>.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.VectorExtensions.Vector3XOffset">
            <summary>
            Represents the offset of the x-component of a <see cref="T:System.Numerics.Vector3"/>.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.VectorExtensions.Vector3YOffset">
            <summary>
            Represents the offset of the y-component of a <see cref="T:System.Numerics.Vector3"/>.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.VectorExtensions.Vector3ZOffset">
            <summary>
            Represents the offset of the z-component of a <see cref="T:System.Numerics.Vector3"/>.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.VectorExtensions.Vector4XOffset">
            <summary>
            Represents the offset of the x-component of a <see cref="T:System.Numerics.Vector4"/>.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.VectorExtensions.Vector4YOffset">
            <summary>
            Represents the offset of the y-component of a <see cref="T:System.Numerics.Vector4"/>.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.VectorExtensions.Vector4ZOffset">
            <summary>
            Represents the offset of the z-component of a <see cref="T:System.Numerics.Vector4"/>.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.VectorExtensions.Vector4WOffset">
            <summary>
            Represents the offset of the w-component of a <see cref="T:System.Numerics.Vector4"/>.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.VectorExtensions.AtomicAdd(ILGPU.VariableView{System.Numerics.Vector2},System.Numerics.Vector2)">
            <summary>
            Atommically adds the given operand and the vector at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="operand">The operand to add.</param>
        </member>
        <member name="M:ILGPU.Algorithms.VectorExtensions.AtomicAdd(ILGPU.VariableView{System.Numerics.Vector3},System.Numerics.Vector3)">
            <summary>
            Atommically adds the given operand and the vector at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="operand">The operand to add.</param>
        </member>
        <member name="M:ILGPU.Algorithms.VectorExtensions.AtomicAdd(ILGPU.VariableView{System.Numerics.Vector4},System.Numerics.Vector4)">
            <summary>
            Atommically adds the given operand and the vector at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="operand">The operand to add.</param>
        </member>
        <member name="M:ILGPU.Algorithms.VectorExtensions.ToVector(ILGPU.Index2)">
            <summary>
            Converts the index to a corresponding <see cref="T:System.Numerics.Vector2"/>.
            </summary>
            <param name="index">The source index.</param>
            <returns>The converted <see cref="T:System.Numerics.Vector2"/>.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.VectorExtensions.ToVector(ILGPU.Index3)">
            <summary>
            Converts the index to a corresponding <see cref="T:System.Numerics.Vector3"/>.
            </summary>
            <param name="index">The source index.</param>
            <returns>The converted <see cref="T:System.Numerics.Vector3"/>.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.VectorExtensions.ToIndex(System.Numerics.Vector2)">
            <summary>
            Converts the vector to a corresponding <see cref="T:ILGPU.Index2"/>.
            </summary>
            <param name="vector">The source vector.</param>
            <returns>The converted <see cref="T:ILGPU.Index2"/>.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.VectorExtensions.ToIndex(System.Numerics.Vector3)">
            <summary>
            Converts the vector to a corresponding <see cref="T:ILGPU.Index3"/>.
            </summary>
            <param name="vector">The source vector.</param>
            <returns>The converted <see cref="T:ILGPU.Index3"/>.</returns>
        </member>
        <member name="T:ILGPU.Algorithms.WarpExtensions">
            <summary>
            Contains extension methods for warps.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.WarpExtensions.Reduce``2(``0)">
            <summary>
            Performs a warp-wide reduction.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TReduction">The type of the reduction logic.</typeparam>
            <param name="value">The current value.</param>
            <returns>The first lane (lane id = 0) will return reduced result.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.WarpExtensions.AllReduce``2(``0)">
            <summary>
            Performs a warp-wide reduction.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TReduction">The type of the reduction logic.</typeparam>
            <param name="value">The current value.</param>
            <returns>All lanes will return the reduced result.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.WarpExtensions.ExclusiveScan``2(``0)">
            <summary>
            Performs a warp-wide exclusive scan.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScan">The type of the warp scan logic.</typeparam>
            <param name="value">The value to scan.</param>
            <returns>The resulting value for the current lane.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.WarpExtensions.InclusiveScan``2(``0)">
            <summary>
            Performs a warp-wide inclusive scan.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScan">The type of the warp scan logic.</typeparam>
            <param name="value">The value to scan.</param>
            <returns>The resulting value for the current lane.</returns>
        </member>
        <member name="T:ILGPU.Algorithms.XMath">
            <summary>
            Represents basic math helpers for general double/float
            math operations that are supported on the CPU and the GPU.
            </summary>
            <remarks>
            NOTE: This class will be replaced by a specific fast-math implementations
            for cross platform (CPU/GPU) math functions in a future release.
            CAUTION: Therefore, these functions are currently not optimized for
            performance or precision in any way.
            </remarks>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.E">
            <summary>
            The E constant.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.ED">
            <summary>
            The E constant.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.Log2E">
            <summary>
            The log2(E) constant.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.Log2ED">
            <summary>
            The log2(E) constant.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.OneOverLog2E">
            <summary>
            The 1/log2(2) constant.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.OneOverLog2ED">
            <summary>
            The 1/log2(2) constant.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.Log10E">
            <summary>
            The log10(E) constant.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.Log10ED">
            <summary>
            The log10(E) constant.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.Ln2">
            <summary>
            The ln(2) constant.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.Ln2D">
            <summary>
            The ln(2) constant.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.OneOverLn2">
            <summary>
            The 1/ln(2) constant.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.OneOverLn2D">
            <summary>
            The 1/ln(2) constant.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.Ln10">
            <summary>
            The ln(10) constant.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.Ln10D">
            <summary>
            The ln(10) constant.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.OneOverLn10">
            <summary>
            The 1/ln(10) constant.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.OneOverLn10D">
            <summary>
            The 1/ln(10) constant.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.PI">
            <summary>
            The PI constant.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.PID">
            <summary>
            The PI constant.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.PIHalf">
            <summary>
            The PI/2 constant.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.PIHalfD">
            <summary>
            The PI/2 constant.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.PIFourth">
            <summary>
            The PI/4 constant.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.PIFourthD">
            <summary>
            The PI/4 constant.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.OneOverPI">
            <summary>
            The 1/PI constant.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.TwoOverPI">
            <summary>
            The 2/PI constant.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.Sqrt2">
            <summary>
            The sqrt(2) constant.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.OneOverSqrt2">
            <summary>
            The 1/sqrt(2) constant.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.OneThird">
            <summary>
            The 1.0f / 3.0f constant.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Abs(System.Double)">
            <summary>
            Computes |value|.
            </summary>
            <param name="value">The value.</param>
            <returns>|value|.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Abs(System.Single)">
            <summary>
            Computes |value|.
            </summary>
            <param name="value">The value.</param>
            <returns>|value|.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Abs(System.SByte)">
            <summary>
            Computes |value|.
            </summary>
            <param name="value">The value.</param>
            <returns>|value|.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Abs(System.Int16)">
            <summary>
            Computes |value|.
            </summary>
            <param name="value">The value.</param>
            <returns>|value|.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Abs(System.Int32)">
            <summary>
            Computes |value|.
            </summary>
            <param name="value">The value.</param>
            <returns>|value|.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Abs(System.Int64)">
            <summary>
            Computes |value|.
            </summary>
            <param name="value">The value.</param>
            <returns>|value|.</returns>
        </member>
        <member name="T:ILGPU.Algorithms.XMath.Cordic">
             <summary>
             Implementation of trigonometric/hyperbolic rotation and vector mode functions using CORDIC approximation.
             https://en.wikipedia.org/wiki/CORDIC
            
             NB: CORDIC is typically implemented using a lookup table with angles. However, since
             these are not currently available, we unroll the loop.
             </summary>
            <summary>
            Implementation of logarithmic functions using CORDIC approximation.
            </summary>
            <summary>
            Implementation of exponential functions using CORDIC approximation.
            </summary>
            <summary>
            Implementation of trigonometric transcendental functions using CORDIC approximation.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.Cordic.Gain">
            <summary>
            Corrects the inaccuracies gained by rotating through the 24 iterations.
            NB: We are using a pre-defined number of iterations, so the scaling can be a constant value.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.Cordic.GainD">
            <summary>
            Corrects the inaccuracies gained by rotating through the 53 iterations.
            NB: We are using a pre-defined number of iterations, so the scaling can be a constant value.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.Cordic.HyperbolicGain">
            <summary>
            Corrects the inaccuracies gained by rotating through the 24 iterations.
            NB: We are using a pre-defined number of iterations, so the scaling can be a constant value.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.Cordic.HyperbolicGainD">
            <summary>
            Corrects the inaccuracies gained by rotating through the 53 iterations.
            NB: We are using a pre-defined number of iterations, so the scaling can be a constant value.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.HyperbolicGainFromCoshZero">
            <summary>
            Calculates the inaccuracy gained by calculating the baseline of Cosh(0).
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.HyperbolicGainFromCoshZeroD">
            <summary>
            Calculates the inaccuracy gained by calculating the baseline of Cosh(0).
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.MatrixMultiply(System.Single@,System.Single@,System.Single)">
            <summary>
            Performs the common matrix multiplication used by CORDIC (a 2x2 matrix with a 2x1 matrix).
            </summary>
            <param name="cos">The current cosine value. Filled in with the result cosine value</param>
            <param name="sin">The current sine value. Filled in with the result sine value</param>
            <param name="factor">The multiplication factor</param>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.MatrixMultiply(System.Double@,System.Double@,System.Double)">
            <summary>
            Performs the common matrix multiplication used by CORDIC (a 2x2 matrix with a 2x1 matrix).
            </summary>
            <param name="cos">The current cosine value. Filled in with the result cosine value</param>
            <param name="sin">The current sine value. Filled in with the result sine value</param>
            <param name="factor">The multiplication factor</param>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.MatrixMultiplyHyperbolic(System.Single@,System.Single@,System.Single)">
            <summary>
            Multiplies a 2x2 matrix with a 2x1 matrix for hyperbolic iterations.
            </summary>
            <param name="cosh">The current hyperbolic cosine value. Filled in with the result hyperbolic cosine value</param>
            <param name="sinh">The current hyperbolic sine value. Filled in with the result hyperbolic sine value</param>
            <param name="factor">The multiplication factor</param>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.MatrixMultiplyHyperbolic(System.Double@,System.Double@,System.Double)">
            <summary>
            Multiplies a 2x2 matrix with a 2x1 matrix for hyperbolic iterations.
            </summary>
            <param name="cosh">The current hyperbolic cosine value. Filled in with the result hyperbolic cosine value</param>
            <param name="sinh">The current hyperbolic sine value. Filled in with the result hyperbolic sine value</param>
            <param name="factor">The multiplication factor</param>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.RangeLimit(System.Single)">
            <summary>
            Ensures that the radians are within the range [-PI, PI]
            </summary>
            <param name="radians">The angle in radians</param>
            <returns>The angle, in radians</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.RangeLimit(System.Double)">
            <summary>
            Ensures that the radians are within the range [-PI, PI]
            </summary>
            <param name="radians">The angle in radians</param>
            <returns>The angle, in radians</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.NextRotateIteration(System.Single,System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Applies the next iteration of CORDIC rotation
            </summary>
            <param name="angle">The angle for this iteration</param>
            <param name="cos">The current cosine value</param>
            <param name="sin">The current sine value</param>
            <param name="radians">The current radians value</param>
            <param name="powerOfTwo">The current multiplier</param>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.NextRotateIteration(System.Double,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Applies the next iteration of CORDIC rotation
            </summary>
            <param name="angle">The angle for this iteration</param>
            <param name="cos">The current cosine value</param>
            <param name="sin">The current sine value</param>
            <param name="radians">The current radians value</param>
            <param name="powerOfTwo">The current multiplier</param>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.RotateIterations(System.Single,System.Single@,System.Single@)">
            <summary>
            Applies the iterations of CORDIC rotations
            </summary>
            <param name="radians">The radians value</param>
            <param name="cos">Filled in with result cosine value</param>
            <param name="sin">Filled in with result sine value</param>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.RotateIterations(System.Double,System.Double@,System.Double@)">
            <summary>
            Applies the iterations of CORDIC rotations
            </summary>
            <param name="radians">The radians value</param>
            <param name="cos">Filled in with result cosine value</param>
            <param name="sin">Filled in with result sine value</param>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.NextVectorIteration(System.Single,System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Applies the next iteration of CORDIC vectoring
            </summary>
            <param name="angle">The angle for this iteration</param>
            <param name="cos">The current cosine value</param>
            <param name="sin">The current sine value</param>
            <param name="radians">The current radians value</param>
            <param name="powerOfTwo">The current multiplier</param>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.NextVectorIteration(System.Double,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Applies the next iteration of CORDIC vectoring
            </summary>
            <param name="angle">The angle for this iteration</param>
            <param name="cos">The current cosine value</param>
            <param name="sin">The current sine value</param>
            <param name="radians">The current radians value</param>
            <param name="powerOfTwo">The current multiplier</param>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.VectorIterations(System.Single)">
            <summary>
            Applies the iterations of CORDIC vectoring
            </summary>
            <param name="target">The target sine value</param>
            <returns>The angle in radians</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.VectorIterations(System.Double)">
            <summary>
            Applies the iterations of CORDIC vectoring
            </summary>
            <param name="target">The target sine value</param>
            <returns>The angle in radians</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.NextRotateHyperbolicIteration(System.Single,System.Single@,System.Single@,System.Single@,System.Single@,System.Int32)">
            <summary>
            Applies the next iteration of CORDIC hyperbolic rotation
            </summary>
            <param name="angle">The angle for this iteration</param>
            <param name="cosh">The current cosh value</param>
            <param name="sinh">The current sinh value</param>
            <param name="radians">The current radians value</param>
            <param name="powerOfTwo">The current multiplier</param>
            <param name="numMultiplications">The number of multiplications in this loop</param>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.NextRotateHyperbolicIteration(System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Int32)">
            <summary>
            Applies the next iteration of CORDIC hyperbolic rotation
            </summary>
            <param name="angle">The angle for this iteration</param>
            <param name="cosh">The current cosh value</param>
            <param name="sinh">The current sinh value</param>
            <param name="radians">The current radians value</param>
            <param name="powerOfTwo">The current multiplier</param>
            <param name="numMultiplications">The number of multiplications in this loop</param>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.RotateHyperbolicIterations(System.Single,System.Single@,System.Single@)">
            <summary>
            Applies the iterations of CORDIC hyperbolic rotations
            </summary>
            <param name="radians">The current radians value</param>
            <param name="cosh">The current cosh value</param>
            <param name="sinh">The current sinh value</param>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.RotateHyperbolicIterations(System.Double,System.Double@,System.Double@)">
            <summary>
            Applies the iterations of CORDIC hyperbolic rotations
            </summary>
            <param name="radians">The current radians value</param>
            <param name="cosh">The current cosh value</param>
            <param name="sinh">The current sinh value</param>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.NextVectorHyperbolicIteration(System.Single,System.Single@,System.Single@,System.Single@,System.Single@,System.Int32)">
            <summary>
            Applies the next iteration of CORDIC hyperbolic vectoring
            </summary>
            <param name="angle">The angle for this iteration</param>
            <param name="cosh">The current cosh value</param>
            <param name="sinh">The current sinh value</param>
            <param name="radians">The current radians value</param>
            <param name="powerOfTwo">The current multiplier</param>
            <param name="numMultiplications">The number of multiplications in this loop</param>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.NextVectorHyperbolicIteration(System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Int32)">
            <summary>
            Applies the next iteration of CORDIC hyperbolic vectoring
            </summary>
            <param name="angle">The angle for this iteration</param>
            <param name="cosh">The current cosh value</param>
            <param name="sinh">The current sinh value</param>
            <param name="radians">The current radians value</param>
            <param name="powerOfTwo">The current multiplier</param>
            <param name="numMultiplications">The number of multiplications in this loop</param>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.VectorHyperbolicIterations(System.Single,System.Single)">
            <summary>
            Applies the iterations of CORDIC hyperbolic vectoring
            </summary>
            <param name="cosh">The current cosh value</param>
            <param name="sinh">The current sinh value</param>
            <returns>The angle in radians</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.VectorHyperbolicIterations(System.Double,System.Double)">
            <summary>
            Applies the iterations of CORDIC hyperbolic vectoring
            </summary>
            <param name="cosh">The current cosh value</param>
            <param name="sinh">The current sinh value</param>
            <returns>The angle in radians</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.Log(System.Single)">
            <summary>
            Implementation of natural logarithm using CORDIC approximation.
            </summary>
            <param name="value">The input value</param>
            <returns>The exponent of a input value raised to base e</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.Log(System.Double)">
            <summary>
            Implementation of natural logarithm using CORDIC approximation.
            </summary>
            <param name="value">The input value</param>
            <returns>The exponent of a input value raised to base e</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.Exp(System.Single)">
            <summary>
            Implementation of e raised to a specific power using CORDIC approximation.
            </summary>
            <param name="value">Specifies the power</param>
            <returns>The number e raised to the specified power</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.Exp(System.Double)">
            <summary>
            Implementation of e raised to a specific power using CORDIC approximation.
            </summary>
            <param name="value">Specifies the power</param>
            <returns>The number e raised to the specified power</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.Sin(System.Single)">
            <summary>
            Implementation of sine approximation using CORDIC.
            </summary>
            <param name="radians">The angle in radians</param>
            <returns>The sine value</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.Sin(System.Double)">
            <summary>
            Implementation of sine approximation using CORDIC.
            </summary>
            <param name="radians">The angle in radians</param>
            <returns>The sine value</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.Cos(System.Single)">
            <summary>
            Implementation of cosine approximation using CORDIC.
            </summary>
            <param name="radians">The angle in radians</param>
            <returns>The cosine value</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.Cos(System.Double)">
            <summary>
            Implementation of cosine approximation using CORDIC.
            </summary>
            <param name="radians">The angle in radians</param>
            <returns>The cosine value</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.SinCos(System.Single,System.Single@,System.Single@)">
            <summary>
            Implementation of sine/cosine approximation using CORDIC.
            </summary>
            <param name="radians">The angle in radians</param>
            <param name="sin">The sine result</param>
            <param name="cos">The cosine result</param>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.SinCos(System.Double,System.Double@,System.Double@)">
            <summary>
            Implementation of sine/cosine approximation using CORDIC.
            </summary>
            <param name="radians">The angle in radians</param>
            <param name="sin">The sine result</param>
            <param name="cos">The cosine result</param>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.Tan(System.Single)">
            <summary>
            Implementation of tangent approximation using CORDIC.
            </summary>
            <param name="radians">The angle in radians</param>
            <returns>The tangent value</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.Tan(System.Double)">
            <summary>
            Implementation of tangent approximation using CORDIC.
            </summary>
            <param name="radians">The angle in radians</param>
            <returns>The tangent value</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.Atan(System.Single)">
            <summary>
            Implementation of inverse tangent approximation using CORDIC.
            </summary>
            <param name="value">The tangent of an angle</param>
            <returns>The angle in radians</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.Atan(System.Double)">
            <summary>
            Implementation of inverse tangent approximation using CORDIC.
            </summary>
            <param name="value">The tangent of an angle</param>
            <returns>The angle in radians</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.Atan2(System.Single,System.Single)">
            <summary>
            Implementation of inverse tangent approximation using CORDIC.
            </summary>
            <param name="y">The y value in radians</param>
            <param name="x">The x value in radians</param>
            <returns>The angle in radians</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.Atan2(System.Double,System.Double)">
            <summary>
            Implementation of inverse tangent approximation using CORDIC.
            </summary>
            <param name="y">The y value in radians</param>
            <param name="x">The x value in radians</param>
            <returns>The angle in radians</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.DegToRad(System.Double)">
            <summary>
            Converts the given value in degrees to radians.
            </summary>
            <param name="degrees">The value in degrees to convert.</param>
            <returns>The converted value in radians.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.DegToRad(System.Single)">
            <summary>
            Converts the given value in degrees to radians.
            </summary>
            <param name="degrees">The value in degrees to convert.</param>
            <returns>The converted value in radians.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.RadToDeg(System.Double)">
            <summary>
            Converts the given value in radians to degrees.
            </summary>
            <param name="radians">The value in radians to convert.</param>
            <returns>The converted value in degrees.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.RadToDeg(System.Single)">
            <summary>
            Converts the given value in radians to degrees.
            </summary>
            <param name="radians">The value in radians to convert.</param>
            <returns>The converted value in degrees.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Floor(System.Double)">
            <summary>
            Computes floor(value).
            </summary>
            <param name="value">The value.</param>
            <returns>floor(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Floor(System.Single)">
            <summary>
            Computes floor(value).
            </summary>
            <param name="value">The value.</param>
            <returns>floor(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Ceiling(System.Double)">
            <summary>
            Computes ceiling(value).
            </summary>
            <param name="value">The value.</param>
            <returns>ceiling(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Ceiling(System.Single)">
            <summary>
            Computes ceiling(value).
            </summary>
            <param name="value">The value.</param>
            <returns>ceiling(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.DivRoundDown(System.Int32,System.Int32)">
            <summary>
            Realizes an integer division of <paramref name="numerator"/>
            divided by <paramref name="denominator"/> while rounding the result
            down to zero.
            </summary>
            <param name="numerator">The numerator.</param>
            <param name="denominator">The denominator.</param>
            <returns>The numerator divided by the denominator rounded to zero.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.DivRoundUp(System.Int32,System.Int32)">
            <summary>
            Realizes an integer division of <paramref name="numerator"/>
            divided by <paramref name="denominator"/> while rounding the result
            up (away from zero).
            </summary>
            <param name="numerator">The numerator.</param>
            <param name="denominator">The denominator.</param>
            <returns
            >The numerator divided by the denominator rounded up (away from zero).
            </returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.DivRoundDown(System.Int64,System.Int64)">
            <summary>
            Realizes an integer division of <paramref name="numerator"/>
            divided by <paramref name="denominator"/> while rounding the result
            down to zero.
            </summary>
            <param name="numerator">The numerator.</param>
            <param name="denominator">The denominator.</param>
            <returns>The numerator divided by the denominator rounded to zero.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.DivRoundUp(System.Int64,System.Int64)">
            <summary>
            Realizes an integer division of <paramref name="numerator"/>
            divided by <paramref name="denominator"/> while rounding the result
            up (away from zero).
            </summary>
            <param name="numerator">The numerator.</param>
            <param name="denominator">The denominator.</param>
            <returns>
            The numerator divided by the denominator rounded up (away from zero).
            </returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Decompose(System.Int64)">
            <summary>
            Decomposes the given integer value into a lower and an upper part.
            </summary>
            <param name="value">The value to decompose.</param>
            <returns>The lower and upper part.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Decompose(System.UInt64)">
            <summary>
            Decomposes the given integer value into a lower and an upper part.
            </summary>
            <param name="value">The value to decompose.</param>
            <returns>The lower and upper part.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.ComposeULong(ILGPU.IntrinsicMath.IntegerParts)">
            <summary>
            Composes an integer from the given lower and upper parts.
            </summary>
            <param name="parts">The lower and upper parts.</param>
            <returns>The composed integer.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.ComposeLong(ILGPU.IntrinsicMath.IntegerParts)">
            <summary>
            Composes an integer from the given lower and upper parts.
            </summary>
            <param name="parts">The lower and upper parts.</param>
            <returns>The composed integer.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Log(System.Double,System.Double)">
            <summary>
            Computes log_newBase(value) to base newBase.
            </summary>
            <param name="value">The value.</param>
            <param name="newBase">The desired base.</param>
            <returns>log_newBase(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Log(System.Single,System.Single)">
            <summary>
            Computes log_newBase(value) to base newBase.
            </summary>
            <param name="value">The value.</param>
            <param name="newBase">The desired base.</param>
            <returns>log_newBase(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Log(System.Double)">
            <summary>
            Computes log(value) to base e.
            </summary>
            <param name="value">The value.</param>
            <returns>log(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Log(System.Single)">
            <summary>
            Computes log(value) to base e.
            </summary>
            <param name="value">The value.</param>
            <returns>log(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Log10(System.Double)">
            <summary>
            Computes log10(value) to base 10.
            </summary>
            <param name="value">The value.</param>
            <returns>log10(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Log10(System.Single)">
            <summary>
            Computes log10(value) to base 10.
            </summary>
            <param name="value">The value.</param>
            <returns>log10(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Log2(System.Double)">
            <summary>
            Computes log2(value) to base 2.
            </summary>
            <param name="value">The value.</param>
            <returns>log2(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Log2(System.Single)">
            <summary>
            Computes log2(value) to base 2.
            </summary>
            <param name="value">The value.</param>
            <returns>log2(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Min(System.Double,System.Double)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Min(System.Single,System.Single)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Min(System.SByte,System.SByte)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Min(System.Int16,System.Int16)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Min(System.Int32,System.Int32)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Min(System.Int64,System.Int64)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Min(System.Byte,System.Byte)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Min(System.UInt16,System.UInt16)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Min(System.UInt32,System.UInt32)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Min(System.UInt64,System.UInt64)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Max(System.Double,System.Double)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Max(System.Single,System.Single)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Max(System.SByte,System.SByte)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Max(System.Int16,System.Int16)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Max(System.Int32,System.Int32)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Max(System.Int64,System.Int64)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Max(System.Byte,System.Byte)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Max(System.UInt16,System.UInt16)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Max(System.UInt32,System.UInt32)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Max(System.UInt64,System.UInt64)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Clamp(System.SByte,System.SByte,System.SByte)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Clamp(System.Int16,System.Int16,System.Int16)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Clamp(System.Int64,System.Int64,System.Int64)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Clamp(System.Byte,System.Byte,System.Byte)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Clamp(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Clamp(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Clamp(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.IsNaN(System.Double)">
            <summary>
            Returns true iff the given value is NaN.
            </summary>
            <param name="value">The value.</param>
            <returns>True, iff the given value is NaN.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.IsNaN(System.Single)">
            <summary>
            Returns true iff the given value is NaN.
            </summary>
            <param name="value">The value.</param>
            <returns>True, iff the given value is NaN.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.IsInfinity(System.Double)">
            <summary>
            Returns true iff the given value is infinity.
            </summary>
            <param name="value">The value.</param>
            <returns>True, iff the given value is infinity.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.IsInfinity(System.Single)">
            <summary>
            Returns true iff the given value is infinity.
            </summary>
            <param name="value">The value.</param>
            <returns>True, iff the given value is infinity.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Pow(System.Double,System.Double)">
            <summary>
            Computes basis^exp.
            </summary>
            <param name="base">The basis.</param>
            <param name="exp">The exponent.</param>
            <returns>pow(basis, exp).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Pow(System.Single,System.Single)">
            <summary>
            Computes basis^exp.
            </summary>
            <param name="base">The basis.</param>
            <param name="exp">The exponent.</param>
            <returns>pow(basis, exp).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Exp(System.Double)">
            <summary>
            Computes exp(value).
            </summary>
            <param name="value">The value.</param>
            <returns>exp(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Exp(System.Single)">
            <summary>
            Computes exp(value).
            </summary>
            <param name="value">The value.</param>
            <returns>exp(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Exp2(System.Double)">
            <summary>
            Computes 2^value.
            </summary>
            <param name="value">The value.</param>
            <returns>2^value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Exp2(System.Single)">
            <summary>
            Computes 2^value.
            </summary>
            <param name="value">The value.</param>
            <returns>2^value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Rcp(System.Double)">
            <summary>
            Computes 1.0 / value.
            </summary>
            <param name="value">The value.</param>
            <returns>1.0 / value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Rcp(System.Single)">
            <summary>
            Computes 1.0f / value.
            </summary>
            <param name="value">The value.</param>
            <returns>1.0f / value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Rem(System.Double,System.Double)">
            <summary>
            Computes x%y.
            </summary>
            <param name="x">The nominator.</param>
            <param name="y">The denominator.</param>
            <returns>x%y.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Rem(System.Single,System.Single)">
            <summary>
            Computes x%y.
            </summary>
            <param name="x">The nominator.</param>
            <param name="y">The denominator.</param>
            <returns>x%y.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.RoundAwayFromZero(System.Double)">
            <summary>
            Rounds the value to the nearest value (halfway cases are rounded away from
            zero).
            </summary>
            <param name="value">The value.</param>
            <returns>The nearest value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.RoundAwayFromZero(System.Single)">
            <summary>
            Rounds the value to the nearest value (halfway cases are rounded away from
            zero).
            </summary>
            <param name="value">The value.</param>
            <returns>The nearest value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Truncate(System.Double)">
            <summary>
            Truncates the given value.
            </summary>
            <param name="value">The value to truncate.</param>
            <returns>The truncated value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Truncate(System.Single)">
            <summary>
            Truncates the given value.
            </summary>
            <param name="value">The value to truncate.</param>
            <returns>The truncated value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Sign(System.Double)">
            <summary>
            Computes the sign of the provided value.
            Sign will return 0 for NaN, Infitity or 0 values.
            </summary>
            <param name="value">The value.</param>
            <returns>-1 for negative value, 1 for positive values, and 0 for
            0, NaN or Infinity.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Sign(System.Single)">
            <summary>
            Computes the sign of the provided value.
            Sign will return 0 for NaN, Infitity or 0 values.
            </summary>
            <param name="value">The value.</param>
            <returns>-1 for negative value, 1 for positive values, and 0 for
            0, NaN or Infinity.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Sqrt(System.Double)">
            <summary>
            Computes sqrt(value).
            </summary>
            <param name="value">The value.</param>
            <returns>sqrt(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Sqrt(System.Single)">
            <summary>
            Computes sqrt(value).
            </summary>
            <param name="value">The value.</param>
            <returns>sqrt(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Rsqrt(System.Double)">
            <summary>
            Computes 1/sqrt(value).
            </summary>
            <param name="value">The value.</param>
            <returns>1/sqrt(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Rsqrt(System.Single)">
            <summary>
            Computes 1/sqrt(value).
            </summary>
            <param name="value">The value.</param>
            <returns>1/sqrt(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Sin(System.Double)">
            <summary>
            Computes sin(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>sin(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Sin(System.Single)">
            <summary>
            Computes sin(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>sin(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Sinh(System.Double)">
            <summary>
            Computes sinh(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>sinh(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Asin(System.Double)">
            <summary>
            Computes asin(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>asin(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Asin(System.Single)">
            <summary>
            Computes asin(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>asin(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Sinh(System.Single)">
            <summary>
            Computes sinh(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>sinh(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cos(System.Double)">
            <summary>
            Computes cos(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>cos(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cos(System.Single)">
            <summary>
            Computes cos(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>cos(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cosh(System.Double)">
            <summary>
            Computes cosh(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>cosh(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cosh(System.Single)">
            <summary>
            Computes cosh(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>cosh(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Acos(System.Double)">
            <summary>
            Computes acos(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>acos(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Acos(System.Single)">
            <summary>
            Computes acos(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>acos(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Tan(System.Double)">
            <summary>
            Computes tan(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>tan(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Tan(System.Single)">
            <summary>
            Computes tan(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>tan(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Tanh(System.Double)">
            <summary>
            Computes tanh(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>tanh(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Tanh(System.Single)">
            <summary>
            Computes tanh(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>tanh(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Atan(System.Double)">
            <summary>
            Computes atan(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>atan(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Atan(System.Single)">
            <summary>
            Computes atan(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>atan(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Atan2(System.Double,System.Double)">
            <summary>
            Computes atan2(y, x).
            </summary>
            <param name="y">The y value in radians.</param>
            <param name="x">The x value in radians.</param>
            <returns>atan2(y, x).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Atan2(System.Single,System.Single)">
            <summary>
            Computes atan2(y, x).
            </summary>
            <param name="y">The y value in radians.</param>
            <param name="x">The x value in radians.</param>
            <returns>atan2(y, x).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.SinCos(System.Double,System.Double@,System.Double@)">
            <summary>
            Computes sin(value) and cos(value).
            </summary>
            <param name="value">The value in radians.</param>
            <param name="sin">The result of sin(value).</param>
            <param name="cos">The result of cos(value).</param>
            <returns>tanh(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.SinCos(System.Single,System.Single@,System.Single@)">
            <summary>
            Computes sin(value) and cos(value).
            </summary>
            <param name="value">The value in radians.</param>
            <param name="sin">The result of sin(value).</param>
            <param name="cos">The result of cos(value).</param>
            <returns>tanh(value).</returns>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.API.CuBlasAPI">
            <summary>
            A native cuBlas API interface.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.Create(ILGPU.Runtime.Cuda.CuBlasAPIVersion)">
            <summary>
            Creates a new API wrapper.
            </summary>
            <param name="version">The cuBlas version to use.</param>
            <returns>The created API wrapper.</returns>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.API.LinuxAPI_V10">
            <summary>
            A Linux V10 cuBlas API.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.API.LinuxAPI_V10.LibName">
            <summary>
            Represents the cuBlas library name.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.LinuxAPI_V10.Create(System.IntPtr@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.Create(System.IntPtr@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.LinuxAPI_V10.GetVersion(System.IntPtr,System.Int32@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.GetVersion(System.IntPtr,System.Int32@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.LinuxAPI_V10.Free(System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.Free(System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.LinuxAPI_V10.GetStream(System.IntPtr,System.IntPtr@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.GetStream(System.IntPtr,System.IntPtr@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.LinuxAPI_V10.SetStream(System.IntPtr,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.SetStream(System.IntPtr,System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.LinuxAPI_V10.GetPointerMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasPointerMode@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.GetPointerMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasPointerMode@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.LinuxAPI_V10.SetPointerMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasPointerMode)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.SetPointerMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasPointerMode)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.LinuxAPI_V10.GetAtomicsMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasAtomicsMode@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.GetAtomicsMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasAtomicsMode@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.LinuxAPI_V10.SetAtomicsMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasAtomicsMode)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.SetAtomicsMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasAtomicsMode)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.LinuxAPI_V10.GetMathMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasMathMode@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.GetMathMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasMathMode@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.LinuxAPI_V10.SetMathMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasMathMode)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.SetMathMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasMathMode)"/>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.API.LinuxAPI_V11">
            <summary>
            A Linux V11 cuBlas API.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.API.LinuxAPI_V11.LibName">
            <summary>
            Represents the cuBlas library name.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.LinuxAPI_V11.Create(System.IntPtr@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.Create(System.IntPtr@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.LinuxAPI_V11.GetVersion(System.IntPtr,System.Int32@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.GetVersion(System.IntPtr,System.Int32@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.LinuxAPI_V11.Free(System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.Free(System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.LinuxAPI_V11.GetStream(System.IntPtr,System.IntPtr@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.GetStream(System.IntPtr,System.IntPtr@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.LinuxAPI_V11.SetStream(System.IntPtr,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.SetStream(System.IntPtr,System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.LinuxAPI_V11.GetPointerMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasPointerMode@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.GetPointerMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasPointerMode@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.LinuxAPI_V11.SetPointerMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasPointerMode)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.SetPointerMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasPointerMode)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.LinuxAPI_V11.GetAtomicsMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasAtomicsMode@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.GetAtomicsMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasAtomicsMode@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.LinuxAPI_V11.SetAtomicsMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasAtomicsMode)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.SetAtomicsMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasAtomicsMode)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.LinuxAPI_V11.GetMathMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasMathMode@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.GetMathMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasMathMode@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.LinuxAPI_V11.SetMathMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasMathMode)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.SetMathMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasMathMode)"/>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.API.MacOSAPI_V10">
            <summary>
            A MacOS V10 cuBlas API.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.API.MacOSAPI_V10.LibName">
            <summary>
            Represents the cuBlas library name.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.MacOSAPI_V10.Create(System.IntPtr@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.Create(System.IntPtr@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.MacOSAPI_V10.GetVersion(System.IntPtr,System.Int32@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.GetVersion(System.IntPtr,System.Int32@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.MacOSAPI_V10.Free(System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.Free(System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.MacOSAPI_V10.GetStream(System.IntPtr,System.IntPtr@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.GetStream(System.IntPtr,System.IntPtr@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.MacOSAPI_V10.SetStream(System.IntPtr,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.SetStream(System.IntPtr,System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.MacOSAPI_V10.GetPointerMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasPointerMode@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.GetPointerMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasPointerMode@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.MacOSAPI_V10.SetPointerMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasPointerMode)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.SetPointerMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasPointerMode)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.MacOSAPI_V10.GetAtomicsMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasAtomicsMode@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.GetAtomicsMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasAtomicsMode@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.MacOSAPI_V10.SetAtomicsMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasAtomicsMode)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.SetAtomicsMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasAtomicsMode)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.MacOSAPI_V10.GetMathMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasMathMode@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.GetMathMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasMathMode@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.MacOSAPI_V10.SetMathMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasMathMode)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.SetMathMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasMathMode)"/>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.API.MacOSAPI_V11">
            <summary>
            A MacOS V11 cuBlas API.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.API.MacOSAPI_V11.LibName">
            <summary>
            Represents the cuBlas library name.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.MacOSAPI_V11.Create(System.IntPtr@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.Create(System.IntPtr@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.MacOSAPI_V11.GetVersion(System.IntPtr,System.Int32@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.GetVersion(System.IntPtr,System.Int32@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.MacOSAPI_V11.Free(System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.Free(System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.MacOSAPI_V11.GetStream(System.IntPtr,System.IntPtr@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.GetStream(System.IntPtr,System.IntPtr@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.MacOSAPI_V11.SetStream(System.IntPtr,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.SetStream(System.IntPtr,System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.MacOSAPI_V11.GetPointerMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasPointerMode@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.GetPointerMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasPointerMode@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.MacOSAPI_V11.SetPointerMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasPointerMode)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.SetPointerMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasPointerMode)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.MacOSAPI_V11.GetAtomicsMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasAtomicsMode@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.GetAtomicsMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasAtomicsMode@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.MacOSAPI_V11.SetAtomicsMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasAtomicsMode)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.SetAtomicsMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasAtomicsMode)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.MacOSAPI_V11.GetMathMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasMathMode@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.GetMathMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasMathMode@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.MacOSAPI_V11.SetMathMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasMathMode)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.SetMathMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasMathMode)"/>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.API.WindowsAPI_V10">
            <summary>
            A Windows V10 cuBlas API.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.API.WindowsAPI_V10.LibName">
            <summary>
            Represents the cuBlas library name.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.WindowsAPI_V10.Create(System.IntPtr@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.Create(System.IntPtr@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.WindowsAPI_V10.GetVersion(System.IntPtr,System.Int32@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.GetVersion(System.IntPtr,System.Int32@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.WindowsAPI_V10.Free(System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.Free(System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.WindowsAPI_V10.GetStream(System.IntPtr,System.IntPtr@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.GetStream(System.IntPtr,System.IntPtr@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.WindowsAPI_V10.SetStream(System.IntPtr,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.SetStream(System.IntPtr,System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.WindowsAPI_V10.GetPointerMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasPointerMode@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.GetPointerMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasPointerMode@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.WindowsAPI_V10.SetPointerMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasPointerMode)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.SetPointerMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasPointerMode)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.WindowsAPI_V10.GetAtomicsMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasAtomicsMode@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.GetAtomicsMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasAtomicsMode@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.WindowsAPI_V10.SetAtomicsMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasAtomicsMode)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.SetAtomicsMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasAtomicsMode)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.WindowsAPI_V10.GetMathMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasMathMode@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.GetMathMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasMathMode@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.WindowsAPI_V10.SetMathMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasMathMode)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.SetMathMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasMathMode)"/>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.API.WindowsAPI_V11">
            <summary>
            A Windows V11 cuBlas API.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.API.WindowsAPI_V11.LibName">
            <summary>
            Represents the cuBlas library name.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.WindowsAPI_V11.Create(System.IntPtr@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.Create(System.IntPtr@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.WindowsAPI_V11.GetVersion(System.IntPtr,System.Int32@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.GetVersion(System.IntPtr,System.Int32@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.WindowsAPI_V11.Free(System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.Free(System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.WindowsAPI_V11.GetStream(System.IntPtr,System.IntPtr@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.GetStream(System.IntPtr,System.IntPtr@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.WindowsAPI_V11.SetStream(System.IntPtr,System.IntPtr)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.SetStream(System.IntPtr,System.IntPtr)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.WindowsAPI_V11.GetPointerMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasPointerMode@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.GetPointerMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasPointerMode@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.WindowsAPI_V11.SetPointerMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasPointerMode)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.SetPointerMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasPointerMode)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.WindowsAPI_V11.GetAtomicsMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasAtomicsMode@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.GetAtomicsMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasAtomicsMode@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.WindowsAPI_V11.SetAtomicsMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasAtomicsMode)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.SetAtomicsMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasAtomicsMode)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.WindowsAPI_V11.GetMathMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasMathMode@)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.GetMathMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasMathMode@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.WindowsAPI_V11.SetMathMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasMathMode)">
            <summary cref="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.SetMathMode(System.IntPtr,ILGPU.Runtime.Cuda.CuBlasMathMode)"/>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CuBlas`1">
            <summary>
            Wraps library calls to the external native Nvidia cuBlas library.
            </summary>
            <typeparam name="TPointerModeHandler">
            A user-defined handler type to change/adapt the current pointer mode.
            </typeparam>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CuBlas`1.PointerModeScope">
            <summary>
            Represents a scoped assignment of a <see cref="P:ILGPU.Runtime.Cuda.CuBlas`1.PointerMode"/> value.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.PointerModeScope.#ctor(ILGPU.Runtime.Cuda.CuBlas{`0},ILGPU.Runtime.Cuda.CuBlasPointerMode)">
            <summary>
            Constructs a new pointer scope.
            </summary>
            <param name="parent">The parent pointer scope.</param>
            <param name="pointerMode">The new pointer mode.</param>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CuBlas`1.PointerModeScope.Parent">
            <summary>
            Returns the parent <see cref="T:ILGPU.Runtime.Cuda.CuBlas`1"/> instance.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CuBlas`1.PointerModeScope.OldPointerMode">
            <summary>
            Returns the old pointer mode.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.PointerModeScope.Recover">
            <summary>
            Recovers the previous pointer mode.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.PointerModeScope.System#IDisposable#Dispose">
            <summary>
            Restores the previous pointer mode.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CuBlas`1.stream">
            <summary>
            The underlying associated stream.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.#ctor(ILGPU.Runtime.Cuda.CudaAccelerator)">
            <summary>
            Constructs a new CuBlas instance to access the Nvidia cublas library.
            </summary>
            <param name="accelerator">The associated cuda accelerator.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.#ctor(ILGPU.Runtime.Cuda.CudaAccelerator,ILGPU.Runtime.Cuda.CuBlasAPIVersion)">
            <summary>
            Constructs a new CuBlas instance to access the Nvidia cublas library.
            </summary>
            <param name="accelerator">The associated cuda accelerator.</param>
            <param name="apiVersion">The cuBlas API version.</param>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CuBlas`1.API">
            <summary>
            Returns the associated cuBlas API instance.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CuBlas`1.Handle">
            <summary>
            The native CuBlas library handle.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CuBlas`1.Version">
            <summary>
            Returns the current library version.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CuBlas`1.PointerMode">
            <summary>
            Gets or sets the current <see cref="T:ILGPU.Runtime.Cuda.CuBlasPointerMode"/> value.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CuBlas`1.AtomicsMode">
            <summary>
            Gets or sets the current <see cref="T:ILGPU.Runtime.Cuda.CuBlasAtomicsMode"/> value.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CuBlas`1.MathMode">
            <summary>
            Gets or sets the current <see cref="T:ILGPU.Runtime.Cuda.CuBlasMathMode"/> value.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CuBlas`1.Stream">
            <summary>
            Gets or sets the associated accelerator stream.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.BeginPointerScope(ILGPU.Runtime.Cuda.CuBlasPointerMode)">
            <summary>
            Opens a new scoped pointer mode.
            </summary>
            <param name="pointerMode">The new pointer mode to use.</param>
            <returns>The created pointer scope.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.EnsurePointerMode(ILGPU.Runtime.Cuda.CuBlasPointerMode)">
            <summary>
            Ensures the given pointer mode.
            </summary>
            <param name="pointerMode">The pointer mode to ensure.</param>
            <remarks>
            Checks whether the given mode is compatible with the current one in debug
            builds.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Amax(ILGPU.ArrayView{System.Single})">
            <summary>
            Performs the CuBlas Amax operation.
            </summary>
            <param name="input">The input view.</param>
            <returns>The computed value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Amax(ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Int32})">
            <summary>
            Performs the CuBlas Amax operation.
            </summary>
            <param name="input">The input view.</param>
            <param name="output">The output view.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Amax(ILGPU.ArrayView{System.Double})">
            <summary>
            Performs the CuBlas Amax operation.
            </summary>
            <param name="input">The input view.</param>
            <returns>The computed value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Amax(ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Int32})">
            <summary>
            Performs the CuBlas Amax operation.
            </summary>
            <param name="input">The input view.</param>
            <param name="output">The output view.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Amax(ILGPU.ArrayView{ILGPU.Util.Float2})">
            <summary>
            Performs the CuBlas Amax operation.
            </summary>
            <param name="input">The input view.</param>
            <returns>The computed value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Amax(ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{System.Int32})">
            <summary>
            Performs the CuBlas Amax operation.
            </summary>
            <param name="input">The input view.</param>
            <param name="output">The output view.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Amax(ILGPU.ArrayView{ILGPU.Util.Double2})">
            <summary>
            Performs the CuBlas Amax operation.
            </summary>
            <param name="input">The input view.</param>
            <returns>The computed value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Amax(ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{System.Int32})">
            <summary>
            Performs the CuBlas Amax operation.
            </summary>
            <param name="input">The input view.</param>
            <param name="output">The output view.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Amin(ILGPU.ArrayView{System.Single})">
            <summary>
            Performs the CuBlas Amin operation.
            </summary>
            <param name="input">The input view.</param>
            <returns>The computed value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Amin(ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Int32})">
            <summary>
            Performs the CuBlas Amin operation.
            </summary>
            <param name="input">The input view.</param>
            <param name="output">The output view.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Amin(ILGPU.ArrayView{System.Double})">
            <summary>
            Performs the CuBlas Amin operation.
            </summary>
            <param name="input">The input view.</param>
            <returns>The computed value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Amin(ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Int32})">
            <summary>
            Performs the CuBlas Amin operation.
            </summary>
            <param name="input">The input view.</param>
            <param name="output">The output view.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Amin(ILGPU.ArrayView{ILGPU.Util.Float2})">
            <summary>
            Performs the CuBlas Amin operation.
            </summary>
            <param name="input">The input view.</param>
            <returns>The computed value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Amin(ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{System.Int32})">
            <summary>
            Performs the CuBlas Amin operation.
            </summary>
            <param name="input">The input view.</param>
            <param name="output">The output view.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Amin(ILGPU.ArrayView{ILGPU.Util.Double2})">
            <summary>
            Performs the CuBlas Amin operation.
            </summary>
            <param name="input">The input view.</param>
            <returns>The computed value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Amin(ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{System.Int32})">
            <summary>
            Performs the CuBlas Amin operation.
            </summary>
            <param name="input">The input view.</param>
            <param name="output">The output view.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Asum(ILGPU.ArrayView{System.Single})">
            <summary>
            Performs the CuBlas Asum operation.
            </summary>
            <param name="input">The input view.</param>
            <returns>The computed value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Asum(ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single})">
            <summary>
            Performs the CuBlas Asum operation.
            </summary>
            <param name="input">The input view.</param>
            <param name="output">The output view.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Asum(ILGPU.ArrayView{System.Double})">
            <summary>
            Performs the CuBlas Asum operation.
            </summary>
            <param name="input">The input view.</param>
            <returns>The computed value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Asum(ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double})">
            <summary>
            Performs the CuBlas Asum operation.
            </summary>
            <param name="input">The input view.</param>
            <param name="output">The output view.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Asum(ILGPU.ArrayView{ILGPU.Util.Float2})">
            <summary>
            Performs the CuBlas Asum operation.
            </summary>
            <param name="input">The input view.</param>
            <returns>The computed value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Asum(ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2})">
            <summary>
            Performs the CuBlas Asum operation.
            </summary>
            <param name="input">The input view.</param>
            <param name="output">The output view.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Asum(ILGPU.ArrayView{ILGPU.Util.Double2})">
            <summary>
            Performs the CuBlas Asum operation.
            </summary>
            <param name="input">The input view.</param>
            <returns>The computed value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Asum(ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2})">
            <summary>
            Performs the CuBlas Asum operation.
            </summary>
            <param name="input">The input view.</param>
            <param name="output">The output view.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Nrm2(ILGPU.ArrayView{System.Single})">
            <summary>
            Performs the CuBlas Nrm2 operation.
            </summary>
            <param name="input">The input view.</param>
            <returns>The computed value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Nrm2(ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single})">
            <summary>
            Performs the CuBlas Nrm2 operation.
            </summary>
            <param name="input">The input view.</param>
            <param name="output">The output view.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Nrm2(ILGPU.ArrayView{System.Double})">
            <summary>
            Performs the CuBlas Nrm2 operation.
            </summary>
            <param name="input">The input view.</param>
            <returns>The computed value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Nrm2(ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double})">
            <summary>
            Performs the CuBlas Nrm2 operation.
            </summary>
            <param name="input">The input view.</param>
            <param name="output">The output view.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Nrm2(ILGPU.ArrayView{ILGPU.Util.Float2})">
            <summary>
            Performs the CuBlas Nrm2 operation.
            </summary>
            <param name="input">The input view.</param>
            <returns>The computed value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Nrm2(ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2})">
            <summary>
            Performs the CuBlas Nrm2 operation.
            </summary>
            <param name="input">The input view.</param>
            <param name="output">The output view.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Nrm2(ILGPU.ArrayView{ILGPU.Util.Double2})">
            <summary>
            Performs the CuBlas Nrm2 operation.
            </summary>
            <param name="input">The input view.</param>
            <returns>The computed value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Nrm2(ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2})">
            <summary>
            Performs the CuBlas Nrm2 operation.
            </summary>
            <param name="input">The input view.</param>
            <param name="output">The output view.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Axpy(System.Single,ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single})">
            <summary>
            Performs the CuBlas Axpy operation.
            </summary>
            <param name="alpha">The alpha value.</param>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Axpy(ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single})">
            <summary>
            Performs the CuBlas Axpy operation.
            </summary>
            <param name="alpha">The alpha value.</param>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Axpy(System.Double,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double})">
            <summary>
            Performs the CuBlas Axpy operation.
            </summary>
            <param name="alpha">The alpha value.</param>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Axpy(ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double})">
            <summary>
            Performs the CuBlas Axpy operation.
            </summary>
            <param name="alpha">The alpha value.</param>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Axpy(ILGPU.Util.Float2,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2})">
            <summary>
            Performs the CuBlas Axpy operation.
            </summary>
            <param name="alpha">The alpha value.</param>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Axpy(ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2})">
            <summary>
            Performs the CuBlas Axpy operation.
            </summary>
            <param name="alpha">The alpha value.</param>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Axpy(ILGPU.Util.Double2,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2})">
            <summary>
            Performs the CuBlas Axpy operation.
            </summary>
            <param name="alpha">The alpha value.</param>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Axpy(ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2})">
            <summary>
            Performs the CuBlas Axpy operation.
            </summary>
            <param name="alpha">The alpha value.</param>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Dot(ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single})">
            <summary>
            Performs the CuBlas Dot operation.
            </summary>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
            <returns>The computed value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Dot(ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single})">
            <summary>
            Performs the CuBlas Dot operation.
            </summary>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
            <param name="output">The output view.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Dot(ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double})">
            <summary>
            Performs the CuBlas Dot operation.
            </summary>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
            <returns>The computed value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Dot(ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double})">
            <summary>
            Performs the CuBlas Dot operation.
            </summary>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
            <param name="output">The output view.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Dot(ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2})">
            <summary>
            Performs the CuBlas Dot operation.
            </summary>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
            <returns>The computed value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Dot(ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2})">
            <summary>
            Performs the CuBlas Dot operation.
            </summary>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
            <param name="output">The output view.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Dot(ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2})">
            <summary>
            Performs the CuBlas Dot operation.
            </summary>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
            <returns>The computed value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Dot(ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2})">
            <summary>
            Performs the CuBlas Dot operation.
            </summary>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
            <param name="output">The output view.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Rot(ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},System.Single,System.Single)">
            <summary>
            Performs the CuBlas Rot operation.
            </summary>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
            <param name="c">The cos angle.</param>
            <param name="s">The sin angle.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Rot(ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single})">
            <summary>
            Performs the CuBlas Rot operation.
            </summary>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
            <param name="c">The cos angle.</param>
            <param name="s">The sin angle.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Rot(ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},System.Double,System.Double)">
            <summary>
            Performs the CuBlas Rot operation.
            </summary>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
            <param name="c">The cos angle.</param>
            <param name="s">The sin angle.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Rot(ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double})">
            <summary>
            Performs the CuBlas Rot operation.
            </summary>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
            <param name="c">The cos angle.</param>
            <param name="s">The sin angle.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Rot(ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.Util.Float2,ILGPU.Util.Float2)">
            <summary>
            Performs the CuBlas Rot operation.
            </summary>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
            <param name="c">The cos angle.</param>
            <param name="s">The sin angle.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Rot(ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2})">
            <summary>
            Performs the CuBlas Rot operation.
            </summary>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
            <param name="c">The cos angle.</param>
            <param name="s">The sin angle.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Rot(ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.Util.Double2,ILGPU.Util.Double2)">
            <summary>
            Performs the CuBlas Rot operation.
            </summary>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
            <param name="c">The cos angle.</param>
            <param name="s">The sin angle.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Rot(ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2})">
            <summary>
            Performs the CuBlas Rot operation.
            </summary>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
            <param name="c">The cos angle.</param>
            <param name="s">The sin angle.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.RotG(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Performs the CuBlas RotG operation.
            </summary>
            <param name="a">The a value.</param>
            <param name="b">The b value.</param>
            <param name="c">The cos angle.</param>
            <param name="s">The sin angle.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.RotG(ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single})">
            <summary>
            Performs the CuBlas RotG operation.
            </summary>
            <param name="a">The a value.</param>
            <param name="b">The b value.</param>
            <param name="c">The cos angle.</param>
            <param name="s">The sin angle.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.RotG(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Performs the CuBlas RotG operation.
            </summary>
            <param name="a">The a value.</param>
            <param name="b">The b value.</param>
            <param name="c">The cos angle.</param>
            <param name="s">The sin angle.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.RotG(ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double})">
            <summary>
            Performs the CuBlas RotG operation.
            </summary>
            <param name="a">The a value.</param>
            <param name="b">The b value.</param>
            <param name="c">The cos angle.</param>
            <param name="s">The sin angle.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.RotG(ILGPU.Util.Float2,ILGPU.Util.Float2,System.Single,ILGPU.Util.Float2)">
            <summary>
            Performs the CuBlas RotG operation.
            </summary>
            <param name="a">The a value.</param>
            <param name="b">The b value.</param>
            <param name="c">The cos angle.</param>
            <param name="s">The sin angle.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.RotG(ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{System.Single},ILGPU.ArrayView{ILGPU.Util.Float2})">
            <summary>
            Performs the CuBlas RotG operation.
            </summary>
            <param name="a">The a value.</param>
            <param name="b">The b value.</param>
            <param name="c">The cos angle.</param>
            <param name="s">The sin angle.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.RotG(ILGPU.Util.Double2,ILGPU.Util.Double2,System.Double,ILGPU.Util.Double2)">
            <summary>
            Performs the CuBlas RotG operation.
            </summary>
            <param name="a">The a value.</param>
            <param name="b">The b value.</param>
            <param name="c">The cos angle.</param>
            <param name="s">The sin angle.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.RotG(ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{System.Double},ILGPU.ArrayView{ILGPU.Util.Double2})">
            <summary>
            Performs the CuBlas RotG operation.
            </summary>
            <param name="a">The a value.</param>
            <param name="b">The b value.</param>
            <param name="c">The cos angle.</param>
            <param name="s">The sin angle.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.RotM(ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},System.Single@)">
            <summary>
            Performs the CuBlas RotM operation.
            </summary>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
            <param name="param">The Givens param.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.RotM(ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single})">
            <summary>
            Performs the CuBlas RotM operation.
            </summary>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
            <param name="param">The Givens param.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.RotM(ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},System.Double@)">
            <summary>
            Performs the CuBlas RotM operation.
            </summary>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
            <param name="param">The Givens param.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.RotM(ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double})">
            <summary>
            Performs the CuBlas RotM operation.
            </summary>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
            <param name="param">The Givens param.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Scal(System.Single,ILGPU.ArrayView{System.Single})">
            <summary>
            Performs the CuBlas Scal operation.
            </summary>
            <param name="alpha">The alpha value.</param>
            <param name="x">The x vector.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Scal(ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single})">
            <summary>
            Performs the CuBlas Scal operation.
            </summary>
            <param name="alpha">The alpha value.</param>
            <param name="x">The x vector.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Scal(System.Double,ILGPU.ArrayView{System.Double})">
            <summary>
            Performs the CuBlas Scal operation.
            </summary>
            <param name="alpha">The alpha value.</param>
            <param name="x">The x vector.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Scal(ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double})">
            <summary>
            Performs the CuBlas Scal operation.
            </summary>
            <param name="alpha">The alpha value.</param>
            <param name="x">The x vector.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Scal(ILGPU.Util.Float2,ILGPU.ArrayView{ILGPU.Util.Float2})">
            <summary>
            Performs the CuBlas Scal operation.
            </summary>
            <param name="alpha">The alpha value.</param>
            <param name="x">The x vector.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Scal(ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2})">
            <summary>
            Performs the CuBlas Scal operation.
            </summary>
            <param name="alpha">The alpha value.</param>
            <param name="x">The x vector.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Scal(ILGPU.Util.Double2,ILGPU.ArrayView{ILGPU.Util.Double2})">
            <summary>
            Performs the CuBlas Scal operation.
            </summary>
            <param name="alpha">The alpha value.</param>
            <param name="x">The x vector.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Scal(ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2})">
            <summary>
            Performs the CuBlas Scal operation.
            </summary>
            <param name="alpha">The alpha value.</param>
            <param name="x">The x vector.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Swap(ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single})">
            <summary>
            Performs the CuBlas Swap operation.
            </summary>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Swap(ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double})">
            <summary>
            Performs the CuBlas Swap operation.
            </summary>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Swap(ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2})">
            <summary>
            Performs the CuBlas Swap operation.
            </summary>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Swap(ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2})">
            <summary>
            Performs the CuBlas Swap operation.
            </summary>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Gbmv(ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32,System.Single,ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Gbmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Gbmv(ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,System.Int32,System.Int32,ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Gbmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Gbmv(ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32,System.Double,ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Gbmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Gbmv(ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,System.Int32,System.Int32,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Gbmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Gbmv(ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,System.Int32,System.Int32,ILGPU.Util.Float2,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.Util.Float2,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Gbmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Gbmv(ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Gbmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Gbmv(ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,System.Int32,System.Int32,ILGPU.Util.Double2,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.Util.Double2,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Gbmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Gbmv(ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Gbmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Gemv(ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,System.Single,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32,System.Single,ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Gemv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Gemv(ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Gemv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Gemv(ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,System.Double,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32,System.Double,ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Gemv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Gemv(ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Gemv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Gemv(ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.Util.Float2,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.Util.Float2,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Gemv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Gemv(ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Gemv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Gemv(ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.Util.Double2,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.Util.Double2,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Gemv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Gemv(ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Gemv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Ger(System.Int32,System.Int32,System.Single,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Ger operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Ger(System.Int32,System.Int32,ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Ger operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Ger(System.Int32,System.Int32,System.Double,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Ger operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Ger(System.Int32,System.Int32,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Ger operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Ger(System.Int32,System.Int32,ILGPU.Util.Float2,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Ger operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Ger(System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Ger operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Ger(System.Int32,System.Int32,ILGPU.Util.Double2,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Ger operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Ger(System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Ger operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Sbmv(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Int32,System.Single,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32,System.Single,ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Sbmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Sbmv(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Int32,ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Sbmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Sbmv(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Int32,System.Double,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32,System.Double,ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Sbmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Sbmv(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Int32,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Sbmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Sbmv(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Int32,ILGPU.Util.Float2,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.Util.Float2,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Sbmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Sbmv(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Sbmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Sbmv(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Int32,ILGPU.Util.Double2,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.Util.Double2,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Sbmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Sbmv(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Sbmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Spmv(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Single,ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},System.Int32,System.Single,ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Spmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Spmv(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Spmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Spmv(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Double,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},System.Int32,System.Double,ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Spmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Spmv(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Spmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Spmv(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.Util.Float2,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.Util.Float2,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Spmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Spmv(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Spmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Spmv(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.Util.Double2,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.Util.Double2,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Spmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Spmv(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Spmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Spr(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Single,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single})">
            <summary>
            Performs the CuBlas Spr operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Spr(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single})">
            <summary>
            Performs the CuBlas Spr operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Spr(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Double,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double})">
            <summary>
            Performs the CuBlas Spr operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Spr(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double})">
            <summary>
            Performs the CuBlas Spr operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Spr(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.Util.Float2,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2})">
            <summary>
            Performs the CuBlas Spr operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Spr(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2})">
            <summary>
            Performs the CuBlas Spr operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Spr(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.Util.Double2,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2})">
            <summary>
            Performs the CuBlas Spr operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Spr(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2})">
            <summary>
            Performs the CuBlas Spr operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Spr2(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Single,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single})">
            <summary>
            Performs the CuBlas Spr2 operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Spr2(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single})">
            <summary>
            Performs the CuBlas Spr2 operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Spr2(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Double,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double})">
            <summary>
            Performs the CuBlas Spr2 operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Spr2(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double})">
            <summary>
            Performs the CuBlas Spr2 operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Spr2(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.Util.Float2,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2})">
            <summary>
            Performs the CuBlas Spr2 operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Spr2(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2})">
            <summary>
            Performs the CuBlas Spr2 operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Spr2(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.Util.Double2,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2})">
            <summary>
            Performs the CuBlas Spr2 operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Spr2(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2})">
            <summary>
            Performs the CuBlas Spr2 operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Symv(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Single,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32,System.Single,ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Symv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Symv(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Symv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Symv(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Double,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32,System.Double,ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Symv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Symv(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Symv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Symv(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.Util.Float2,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.Util.Float2,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Symv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Symv(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Symv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Symv(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.Util.Double2,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.Util.Double2,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Symv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Symv(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Symv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syr(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Single,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Syr operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syr(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Syr operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syr(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Double,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Syr operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syr(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Syr operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syr(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.Util.Float2,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Syr operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syr(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Syr operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syr(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.Util.Double2,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Syr operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syr(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Syr operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syr2(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Single,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Syr2 operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syr2(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Syr2 operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syr2(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Double,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Syr2 operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syr2(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Syr2 operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syr2(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.Util.Float2,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Syr2 operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syr2(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Syr2 operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syr2(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.Util.Double2,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Syr2 operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syr2(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Syr2 operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Tbmv(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,System.Int32,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Tbmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Tbmv(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,System.Int32,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Tbmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Tbmv(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Tbmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Tbmv(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Tbmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Tbsv(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,System.Int32,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Tbsv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Tbsv(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,System.Int32,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Tbsv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Tbsv(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Tbsv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Tbsv(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Tbsv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Tpmv(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Tpmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Tpmv(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Tpmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Tpmv(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Tpmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Tpmv(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Tpmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Tpsv(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Tpsv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Tpsv(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Tpsv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Tpsv(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Tpsv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Tpsv(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Tpsv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Trmv(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Trmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Trmv(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Trmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Trmv(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Trmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Trmv(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Trmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Trsv(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Trsv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Trsv(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Trsv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Trsv(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Trsv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Trsv(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Trsv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Gemm(ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,System.Int32,System.Single,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32,System.Single,ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Gemm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Gemm(ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,System.Int32,ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Gemm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Gemm(ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,System.Int32,System.Double,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32,System.Double,ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Gemm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Gemm(ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,System.Int32,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Gemm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Gemm(ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,System.Int32,ILGPU.Util.Float2,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.Util.Float2,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Gemm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Gemm(ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Gemm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Gemm(ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,System.Int32,ILGPU.Util.Double2,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.Util.Double2,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Gemm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Gemm(ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Gemm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Symm(ILGPU.Runtime.Cuda.CuBlasSideMode,ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Int32,System.Single,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32,System.Single,ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Symm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Symm(ILGPU.Runtime.Cuda.CuBlasSideMode,ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Int32,ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Symm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Symm(ILGPU.Runtime.Cuda.CuBlasSideMode,ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Int32,System.Double,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32,System.Double,ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Symm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Symm(ILGPU.Runtime.Cuda.CuBlasSideMode,ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Int32,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Symm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Symm(ILGPU.Runtime.Cuda.CuBlasSideMode,ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Int32,ILGPU.Util.Float2,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.Util.Float2,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Symm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Symm(ILGPU.Runtime.Cuda.CuBlasSideMode,ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Symm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Symm(ILGPU.Runtime.Cuda.CuBlasSideMode,ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Int32,ILGPU.Util.Double2,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.Util.Double2,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Symm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Symm(ILGPU.Runtime.Cuda.CuBlasSideMode,ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Symm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syrk(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,System.Single,ILGPU.ArrayView{System.Single},System.Int32,System.Single,ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Syrk operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syrk(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Syrk operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syrk(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,System.Double,ILGPU.ArrayView{System.Double},System.Int32,System.Double,ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Syrk operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syrk(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Syrk operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syrk(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.Util.Float2,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.Util.Float2,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Syrk operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syrk(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Syrk operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syrk(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.Util.Double2,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.Util.Double2,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Syrk operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syrk(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Syrk operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syr2k(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,System.Single,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32,System.Single,ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Syr2k operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syr2k(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Syr2k operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syr2k(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,System.Double,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32,System.Double,ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Syr2k operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syr2k(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Syr2k operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syr2k(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.Util.Float2,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.Util.Float2,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Syr2k operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syr2k(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Syr2k operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syr2k(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.Util.Double2,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.Util.Double2,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Syr2k operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syr2k(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Syr2k operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syrkx(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,System.Single,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32,System.Single,ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Syrkx operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syrkx(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Syrkx operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syrkx(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,System.Double,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32,System.Double,ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Syrkx operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syrkx(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Syrkx operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syrkx(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.Util.Float2,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.Util.Float2,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Syrkx operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syrkx(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Syrkx operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syrkx(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.Util.Double2,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.Util.Double2,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Syrkx operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syrkx(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Syrkx operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Trmm(ILGPU.Runtime.Cuda.CuBlasSideMode,ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,System.Int32,System.Single,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Trmm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Trmm(ILGPU.Runtime.Cuda.CuBlasSideMode,ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,System.Int32,ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Trmm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Trmm(ILGPU.Runtime.Cuda.CuBlasSideMode,ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,System.Int32,System.Double,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Trmm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Trmm(ILGPU.Runtime.Cuda.CuBlasSideMode,ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,System.Int32,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Trmm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Trmm(ILGPU.Runtime.Cuda.CuBlasSideMode,ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,System.Int32,ILGPU.Util.Float2,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Trmm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Trmm(ILGPU.Runtime.Cuda.CuBlasSideMode,ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Trmm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Trmm(ILGPU.Runtime.Cuda.CuBlasSideMode,ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,System.Int32,ILGPU.Util.Double2,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Trmm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Trmm(ILGPU.Runtime.Cuda.CuBlasSideMode,ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Trmm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Trsm(ILGPU.Runtime.Cuda.CuBlasSideMode,ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,System.Int32,System.Single,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Trsm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Trsm(ILGPU.Runtime.Cuda.CuBlasSideMode,ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,System.Int32,ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Trsm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Trsm(ILGPU.Runtime.Cuda.CuBlasSideMode,ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,System.Int32,System.Double,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Trsm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Trsm(ILGPU.Runtime.Cuda.CuBlasSideMode,ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,System.Int32,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Trsm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Trsm(ILGPU.Runtime.Cuda.CuBlasSideMode,ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,System.Int32,ILGPU.Util.Float2,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Trsm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Trsm(ILGPU.Runtime.Cuda.CuBlasSideMode,ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Trsm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Trsm(ILGPU.Runtime.Cuda.CuBlasSideMode,ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,System.Int32,ILGPU.Util.Double2,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Trsm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Trsm(ILGPU.Runtime.Cuda.CuBlasSideMode,ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Trsm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Geam(ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,System.Single,ILGPU.ArrayView{System.Single},System.Int32,System.Single,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Geam operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Geam(ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Geam operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Geam(ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,System.Double,ILGPU.ArrayView{System.Double},System.Int32,System.Double,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Geam operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Geam(ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Geam operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Geam(ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.Util.Float2,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.Util.Float2,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Geam operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Geam(ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Geam operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Geam(ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.Util.Double2,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.Util.Double2,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Geam operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Geam(ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Geam operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Dgmm(ILGPU.Runtime.Cuda.CuBlasSideMode,System.Int32,System.Int32,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Dgmm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Dgmm(ILGPU.Runtime.Cuda.CuBlasSideMode,System.Int32,System.Int32,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Dgmm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Dgmm(ILGPU.Runtime.Cuda.CuBlasSideMode,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Dgmm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Dgmm(ILGPU.Runtime.Cuda.CuBlasSideMode,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Dgmm operation.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CuBlas">
            <summary>
            Represents a <see cref="T:ILGPU.Runtime.Cuda.CuBlas`1"/> class that does not handle
            pointer mode changes automatically.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas.#ctor(ILGPU.Runtime.Cuda.CudaAccelerator)">
            <summary>
            Constructs a new CuBlas instance to access the Nvidia cublas library.
            </summary>
            <param name="accelerator">The associated cuda accelerator.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas.#ctor(ILGPU.Runtime.Cuda.CudaAccelerator,ILGPU.Runtime.Cuda.CuBlasAPIVersion)">
            <summary>
            Constructs a new CuBlas instance to access the Nvidia cublas library.
            </summary>
            <param name="accelerator">The associated cuda accelerator.</param>
            <param name="apiVersion">The cuBlas API version.</param>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CuBlasException">
            <summary>
            Represents an CuBlas exception that can be thrown by the CuBlas library.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlasException.#ctor">
            <summary>
            Constructs a new CuBlas exception.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlasException.#ctor(ILGPU.Runtime.Cuda.CuBlasStatus)">
            <summary>
            Constructs a new CuBlas exception.
            </summary>
            <param name="errorCode">The CuBlas runtime error.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlasException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary cref="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CuBlasException.Error">
            <summary>
            Returns the error.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlasException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary cref="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlasException.ThrowIfFailed(ILGPU.Runtime.Cuda.CuBlasStatus)">
            <summary>
            Checks the given status and throws an exception in case of an error.
            </summary>
            <param name="errorCode">The CuBlas error code to check.</param>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.ICuBlasPointerModeHandler`1">
            <summary>
            An abstract handler to adapt the current pointer mode of a
            <see cref="T:ILGPU.Runtime.Cuda.CuBlas`1"/> instance.
            </summary>
            <typeparam name="THandler">The handler type itself.</typeparam>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.ICuBlasPointerModeHandler`1.UpdatePointerMode(ILGPU.Runtime.Cuda.CuBlas{`0},ILGPU.Runtime.Cuda.CuBlasPointerMode)">
            <summary>
            Updates the pointer mode to be compatible with the given one.
            </summary>
            <param name="parent">The parent instance to use.</param>
            <param name="pointerMode">The new pointer mode to use.</param>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CuBlasPointerModeHandlers">
            <summary>
            A utility class that holds pre-defined pointer mode handlers that can be used in
            combination with the type <see cref="T:ILGPU.Runtime.Cuda.CuBlas`1"/>.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CuBlasPointerModeHandlers.AutomaticMode">
            <summary>
            A custom handler type that automatically updates the pointer mode to be
            compatible with the requested pointer mode.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlasPointerModeHandlers.AutomaticMode.UpdatePointerMode(ILGPU.Runtime.Cuda.CuBlas{ILGPU.Runtime.Cuda.CuBlasPointerModeHandlers.AutomaticMode},ILGPU.Runtime.Cuda.CuBlasPointerMode)">
            <summary cref="M:ILGPU.Runtime.Cuda.ICuBlasPointerModeHandler`1.UpdatePointerMode(ILGPU.Runtime.Cuda.CuBlas{`0},ILGPU.Runtime.Cuda.CuBlasPointerMode)"/>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CuBlasPointerModeHandlers.ManualMode">
            <summary>
            A custom handler type that does not automatically update the pointer mode.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlasPointerModeHandlers.ManualMode.UpdatePointerMode(ILGPU.Runtime.Cuda.CuBlas{ILGPU.Runtime.Cuda.CuBlasPointerModeHandlers.ManualMode},ILGPU.Runtime.Cuda.CuBlasPointerMode)">
            <summary cref="M:ILGPU.Runtime.Cuda.ICuBlasPointerModeHandler`1.UpdatePointerMode(ILGPU.Runtime.Cuda.CuBlas{`0},ILGPU.Runtime.Cuda.CuBlasPointerMode)"/>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CuBlasPointerModeHandlers.Automatic">
            <summary>
            Returns an automatic pointer mode handler that switches the underlying pointer
            mode of the <see cref="T:ILGPU.Runtime.Cuda.CuBlas`1"/> class automatically.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CuBlasPointerModeHandlers.Manual">
            <summary>
            Returns a manual pointer mode handler that does not change the underlying
            pointer mode of the <see cref="T:ILGPU.Runtime.Cuda.CuBlas`1"/> class.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CuBlasAPIVersion">
            <summary>
            Specifies a cuBlas API version.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CuBlasAPIVersion.V10">
            <summary>
            Version 10 of the cuBlas library.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CuBlasAPIVersion.V11">
            <summary>
            Version 11 of the cuBlas library.
            </summary>
        </member>
    </members>
</doc>
